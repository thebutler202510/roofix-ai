{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# RooFix AI - Commercial Roofing Platform\n\n## Overview\n\nRooFix AI is a marketing website for a commercial roofing AI platform that promises to revolutionize the industry through automated proposal generation, intelligent inspection analysis, and precision cost estimation. The application is built as a full-stack TypeScript application with a React frontend and Express backend, designed to capture leads and contact information from potential customers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React 18 with TypeScript using Vite as the build tool and development server.\n\n**UI Component System**: The application uses shadcn/ui components built on top of Radix UI primitives, providing a comprehensive set of accessible, customizable components styled with Tailwind CSS. The \"new-york\" style variant is configured with CSS variables for theming.\n\n**Routing**: Client-side routing is handled by Wouter, a lightweight routing solution. The application includes nine main routes: Home, About, Features, Tools, Pricing, Store, RooFix Academy (Training Center), Manufacturer Documents, and Contact pages.\n\n**State Management**: React Query (@tanstack/react-query) manages server state and API interactions. Forms use React Hook Form with Zod validation for type-safe form handling.\n\n**Styling**: Tailwind CSS provides utility-first styling with a custom design system featuring a dark theme optimized for commercial/professional aesthetics. Custom CSS variables enable consistent theming across components.\n\n**Design Rationale**: The component-based architecture with shadcn/ui provides a balance between customization and consistency. Using Vite ensures fast development builds, while Wouter keeps the bundle size minimal compared to heavier routing solutions like React Router.\n\n### Backend Architecture\n\n**Server Framework**: Express.js running on Node.js with TypeScript for type safety throughout the backend.\n\n**API Design**: RESTful API with endpoints for lead capture, contact forms, training materials, and manufacturer documents:\n- `POST /api/leads` - Captures marketing leads from the homepage form\n- `POST /api/contacts` - Handles contact form submissions\n- `GET /api/training/courses` - Returns all training courses sorted by order\n- `GET /api/training/resources` - Returns all training resources sorted by order\n- `GET /api/manufacturer-documents` - Returns all manufacturer documents sorted by manufacturer and title\n- `POST /api/manufacturer-documents` - Creates new manufacturer document entries\n\n**Data Validation**: Zod schemas validate incoming requests, with drizzle-zod integration ensuring consistency between database schemas and validation rules. The fromZodError utility provides user-friendly error messages.\n\n**Storage Layer**: Implements PostgreSQL database storage through the DbStorage class, which maintains leads, contacts, training courses, and training resources in persistent database tables. The IStorage interface provides abstraction for CRUD operations.\n\n**Development Server**: Vite middleware integration allows the Express server to serve the React application in development, with HMR (Hot Module Replacement) support.\n\n**Design Rationale**: The storage abstraction through the IStorage interface allows easy swapping between in-memory and database-backed implementations without changing business logic. Express provides a lightweight, familiar foundation that integrates well with the TypeScript ecosystem.\n\n### Database Architecture\n\n**ORM**: Drizzle ORM configured for PostgreSQL with the Neon serverless driver for edge-compatible database access.\n\n**Schema Design**: Four primary tables defined in a shared schema:\n\n1. **leads** table:\n   - Captures basic contact information (firstName, lastName, email)\n   - Optional business context (company, phone, role)\n   - Auto-generated UUID primary key\n   - Timestamp tracking with createdAt\n\n2. **contacts** table:\n   - Similar structure to leads with additional fields\n   - inquiryType for categorizing contact requests\n   - Required message field for detailed inquiries\n   - Auto-generated UUID primary key\n   - Timestamp tracking with createdAt\n\n3. **training_courses** table:\n   - Stores training courses with title, description, duration, level\n   - Category field distinguishes app vs business training\n   - Icon and sortOrder for UI presentation\n   - Auto-generated UUID primary key\n   - Timestamp tracking with createdAt\n\n4. **training_resources** table:\n   - Stores additional training resources with title and description\n   - Icon and sortOrder for UI presentation\n   - Auto-generated UUID primary key\n   - Timestamp tracking with createdAt\n\n**Migration Strategy**: Drizzle Kit manages schema migrations with configuration pointing to `./migrations` output directory. The `db:push` script applies schema changes directly to the database.\n\n**Design Rationale**: Separating leads and contacts allows different data collection strategies - leads are lighter weight for quick sign-ups, while contacts capture more detailed information. Training materials are stored in separate tables to enable dynamic content management without code changes. Using Drizzle with Neon provides type-safe database access with serverless-compatible connections. The shared schema pattern ensures consistency between client and server validation.\n\n### Build and Deployment\n\n**Build Process**: \n- Frontend: Vite bundles the React application into static assets in `dist/public`\n- Backend: esbuild compiles the Express server into a single ESM bundle in `dist`\n\n**Development Workflow**: The dev script runs tsx to execute TypeScript directly with hot reloading for rapid development iterations.\n\n**Production**: The start script runs the compiled server bundle which serves both the API and static frontend files.\n\n**Design Rationale**: Separating frontend and backend builds allows independent optimization. Vite provides optimized production builds with code splitting, while esbuild creates efficient server bundles. The monorepo structure with shared types reduces duplication and ensures consistency.\n\n## External Dependencies\n\n### UI Components and Styling\n- **Radix UI**: Comprehensive suite of unstyled, accessible React components (@radix-ui/* packages)\n- **shadcn/ui**: Pre-configured component library built on Radix UI with Tailwind styling\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **Lucide React**: Icon library for consistent iconography\n- **React Icons**: Additional icons (social media icons like X, LinkedIn, YouTube)\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **clsx & tailwind-merge**: Utilities for conditional className composition\n\n### Forms and Validation\n- **React Hook Form**: Performant form state management with minimal re-renders\n- **Zod**: TypeScript-first schema validation library\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **zod-validation-error**: User-friendly error message formatting\n\n### Data Management\n- **@tanstack/react-query**: Server state management and data fetching\n- **Drizzle ORM**: TypeScript ORM with strong typing and migrations\n- **drizzle-zod**: Integration between Drizzle schemas and Zod validation\n- **@neondatabase/serverless**: Serverless PostgreSQL driver for Neon database\n\n### Date and Time\n- **date-fns**: Modern JavaScript date utility library\n\n### Build Tools and Development\n- **Vite**: Next-generation frontend build tool and dev server\n- **@vitejs/plugin-react**: Official React plugin for Vite\n- **esbuild**: Extremely fast JavaScript bundler for server code\n- **tsx**: TypeScript execution engine for development\n- **TypeScript**: Static type checking and enhanced developer experience\n\n### Replit-Specific Integrations\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Code navigation enhancement\n- **@replit/vite-plugin-dev-banner**: Development mode indicator\n\n### Routing and UI Utilities\n- **wouter**: Minimalist routing library (~1.5KB)\n- **cmdk**: Command menu component (search/command palette)\n- **embla-carousel-react**: Carousel component library\n- **nanoid**: Compact URL-safe unique ID generator\n\n### Database Connection\n- **Environment Variable Required**: `DATABASE_URL` must be set for PostgreSQL connection via Neon\n\nThe application is designed to be deployed on Replit with Neon as the PostgreSQL provider, though the architecture supports deployment to any Node.js hosting platform with appropriate environment configuration.\n\n## Key Features\n\n### Contractor Tools (`/tools`)\nProfessional roofing calculators and utilities for commercial contractors, featuring:\n\n1. **ROI Calculator** - Calculate return on investment for roofing projects with inputs for project cost, energy savings, lifespan, and maintenance costs. Outputs total savings, payback period, annual ROI, and break-even point.\n\n2. **Wind Uplift Pressure Calculator** - Calculate wind uplift forces for proper fastener selection based on ASCE 7 standards. Inputs include building height, wind speed (with zone presets), roof zone, exposure category, and slope. Outputs design pressure, fastener spacing, attachment patterns, and safety factors.\n\n3. **Roof Area Calculator** - Calculate square footage and material quantities for flat, gable, hip, and complex roofs. Accounts for pitch/slope, waste factor, and estimates membrane rolls needed.\n\n4. **Insulation R-Value Calculator** - Determine required insulation for energy efficiency based on climate zone (1-8), building type, current R-value, and target savings. Provides recommendations for Polyiso, XPS, and EPS insulation thicknesses.\n\n5. **Quick Project Cost Estimator** - Estimate commercial roofing project costs with inputs for system type (TPO, PVC, EPDM, etc.), installation method, insulation requirements, tear-off needs, and regional adjustments. Outputs material costs, labor costs, total ranges (low/mid/high), cost per square, and timeline estimates.\n\n6. **Roof Slope/Pitch Calculator** - Convert between slope formats (rise/run, degrees, percentage, inches per foot) and assess drainage adequacy with system-specific recommendations.\n\nAll calculators use modal dialogs for a focused user experience, include real-time calculations, clear/reset functionality, and follow the cyberpunk design aesthetic with neon accents matching the rest of the application.","size_bytes":10546},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        display: [\"var(--font-display)\"],\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":1570},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"scripts/import-manufacturer-docs.js":{"content":"import { readFile } from 'fs/promises';\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.API_URL || 'http://localhost:5000';\n\nfunction extractManufacturer(title, url) {\n  // Check title prefix first\n  if (title.startsWith('GAF ')) return 'GAF';\n  if (title.startsWith('Carlisle ')) return 'Carlisle';\n  if (title.startsWith('Versico ')) return 'Versico';\n  if (title.startsWith('Johns Manville ') || title.startsWith('JM ')) return 'Johns Manville';\n  if (title.startsWith('Holcim ')) return 'Holcim Elevate';\n  \n  // Fall back to URL detection\n  if (url.includes('gaf.com')) return 'GAF';\n  if (url.includes('versico.com')) return 'Versico';\n  if (url.includes('carlisle')) return 'Carlisle';\n  if (url.includes('jm.com')) return 'Johns Manville';\n  if (url.includes('holcim')) return 'Holcim Elevate';\n  \n  return 'GAF'; // Default\n}\n\nfunction extractSystemType(title, url) {\n  const text = `${title} ${url}`.toLowerCase();\n  \n  if (text.includes('tpo')) return 'TPO';\n  if (text.includes('pvc')) return 'PVC';\n  if (text.includes('epdm')) return 'EPDM';\n  if (text.includes('asphalt') || text.includes('asphaltic') || text.includes('mod bit')) return 'Asphalt';\n  if (text.includes('coating') || text.includes('liquid')) return 'Coatings';\n  if (text.includes('insulation') || text.includes('polyiso') || text.includes('iso')) return 'Insulation';\n  if (text.includes('fastener') || text.includes('adhesive') || text.includes('accessor') || text.includes('edge') || text.includes('metal')) return 'Accessories';\n  \n  return 'General';\n}\n\nfunction mapCategoryToDocType(category, title) {\n  const catLower = category.toLowerCase();\n  const titleLower = title.toLowerCase();\n  \n  if (catLower.includes('warrant') || catLower.includes('guarantee')) return 'Warranty';\n  if (catLower.includes('safety') || catLower.includes('sds')) return 'Safety Data Sheet';\n  if (catLower.includes('technical bulletin')) return 'Technical Bulletin';\n  if (catLower.includes('specification')) return 'Specification';\n  if (catLower.includes('installation') || catLower.includes('detail')) return 'Installation Guide';\n  if (titleLower.includes('data sheet') || titleLower.includes('pds')) return 'Product Data Sheet';\n  if (titleLower.includes('installation') || titleLower.includes('detail')) return 'Installation Guide';\n  if (titleLower.includes('specification') || titleLower.includes('spec')) return 'Specification';\n  \n  return 'Technical Bulletin';\n}\n\nasync function saveDocument(doc) {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/api/manufacturer-documents`, doc);\n    return { success: true, data: response.data };\n  } catch (error) {\n    if (error.response?.status === 500 && error.response?.data?.message?.includes('duplicate')) {\n      return { success: false, duplicate: true };\n    }\n    return { success: false, error: error.response?.data?.message || error.message };\n  }\n}\n\nasync function importDocuments() {\n  console.log('📦 Importing comprehensive manufacturer documents...\\n');\n  \n  const jsonData = await readFile('attached_assets/complete_commercial_roofing_documents_with_carlisle_1759271288402.json', 'utf-8');\n  const documents = JSON.parse(jsonData);\n  \n  console.log(`Found ${documents.length} documents in JSON file\\n`);\n  \n  let successCount = 0;\n  let duplicateCount = 0;\n  let errorCount = 0;\n  const seenUrls = new Set();\n  \n  for (let i = 0; i < documents.length; i++) {\n    const doc = documents[i];\n    \n    if (seenUrls.has(doc.url)) {\n      duplicateCount++;\n      continue;\n    }\n    seenUrls.add(doc.url);\n    \n    const manufacturer = extractManufacturer(doc.title, doc.url);\n    const documentType = mapCategoryToDocType(doc.category, doc.title);\n    const systemType = extractSystemType(doc.title, doc.url);\n    \n    const result = await saveDocument({\n      manufacturer,\n      documentTitle: doc.title,\n      documentType,\n      systemType,\n      documentUrl: doc.url,\n      thumbnailUrl: null\n    });\n    \n    if (result.success) {\n      successCount++;\n      if (successCount % 1000 === 0) {\n        console.log(`✓ Imported ${successCount} documents...`);\n      }\n    } else if (result.duplicate) {\n      duplicateCount++;\n    } else {\n      errorCount++;\n      if (errorCount <= 5) {\n        console.error(`✗ Error: ${doc.title} - ${result.error}`);\n      }\n    }\n  }\n  \n  console.log(`\\n📊 Import Summary:`);\n  console.log(`   ✓ Successfully imported: ${successCount} documents`);\n  console.log(`   ⊘ Skipped (duplicates): ${duplicateCount} documents`);\n  console.log(`   ✗ Errors: ${errorCount} documents`);\n  console.log(`\\n✅ Import completed!`);\n}\n\nimportDocuments().catch(console.error);\n","size_bytes":4671},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });\n","size_bytes":439},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertLeadSchema, insertContactSchema, insertManufacturerDocumentSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Lead submission endpoint\n  app.post(\"/api/leads\", async (req, res, next) => {\n    try {\n      const result = insertLeadSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: validationError.message \n        });\n      }\n\n      const lead = await storage.createLead(result.data);\n      res.status(201).json(lead);\n    } catch (error: any) {\n      next(error);\n    }\n  });\n\n  // Contact submission endpoint\n  app.post(\"/api/contacts\", async (req, res, next) => {\n    try {\n      const result = insertContactSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: validationError.message \n        });\n      }\n\n      const contact = await storage.createContact(result.data);\n      res.status(201).json(contact);\n    } catch (error: any) {\n      next(error);\n    }\n  });\n\n  // Training courses endpoint\n  app.get(\"/api/training/courses\", async (req, res, next) => {\n    try {\n      const courses = await storage.getTrainingCourses();\n      res.json(courses);\n    } catch (error: any) {\n      next(error);\n    }\n  });\n\n  // Training resources endpoint\n  app.get(\"/api/training/resources\", async (req, res, next) => {\n    try {\n      const resources = await storage.getTrainingResources();\n      res.json(resources);\n    } catch (error: any) {\n      next(error);\n    }\n  });\n\n  // Manufacturer documents endpoint with pagination and filtering\n  app.get(\"/api/manufacturer-documents\", async (req, res, next) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const offset = req.query.offset ? parseInt(req.query.offset as string) : undefined;\n      const search = req.query.search as string | undefined;\n      const manufacturers = req.query.manufacturers ? (req.query.manufacturers as string).split(',') : undefined;\n      const systemTypes = req.query.systemTypes ? (req.query.systemTypes as string).split(',') : undefined;\n      const documentTypes = req.query.documentTypes ? (req.query.documentTypes as string).split(',') : undefined;\n      \n      const filters = {\n        search,\n        manufacturers,\n        systemTypes,\n        documentTypes\n      };\n      \n      const actualLimit = limit || 50;\n      const actualOffset = offset || 0;\n      \n      const [documents, totalCount] = await Promise.all([\n        storage.getManufacturerDocuments(actualLimit, actualOffset, filters),\n        storage.getManufacturerDocumentsCount(filters)\n      ]);\n      \n      res.json({\n        documents,\n        total: totalCount,\n        limit: actualLimit,\n        offset: actualOffset\n      });\n    } catch (error: any) {\n      next(error);\n    }\n  });\n\n  // Create manufacturer document endpoint\n  app.post(\"/api/manufacturer-documents\", async (req, res, next) => {\n    try {\n      const result = insertManufacturerDocumentSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        const validationError = fromZodError(result.error);\n        return res.status(400).json({ \n          message: validationError.message \n        });\n      }\n\n      const document = await storage.createManufacturerDocument(result.data);\n      res.status(201).json(document);\n    } catch (error: any) {\n      next(error);\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3851},"server/seed.ts":{"content":"import { storage } from \"./storage\";\n\nasync function seed() {\n  console.log(\"Seeding training courses...\");\n  \n  const appTrainingCourses = [\n    {\n      title: \"Getting Started with RooFix AI\",\n      description: \"Complete guide to setting up and using RooFix AI\",\n      duration: \"45 min\",\n      level: \"Beginner\",\n      category: \"app\",\n      icon: \"PlayCircle\",\n      sortOrder: 1,\n    },\n    {\n      title: \"Advanced Proposal Generation\",\n      description: \"Master AI-powered proposal creation and customization\",\n      duration: \"60 min\",\n      level: \"Advanced\",\n      category: \"app\",\n      icon: \"Video\",\n      sortOrder: 2,\n    },\n    {\n      title: \"Inspection Analysis Tools\",\n      description: \"Learn to leverage AI for comprehensive roof inspections\",\n      duration: \"50 min\",\n      level: \"Intermediate\",\n      category: \"app\",\n      icon: \"PlayCircle\",\n      sortOrder: 3,\n    },\n  ];\n\n  const businessTrainingCourses = [\n    {\n      title: \"Building a Commercial Roofing Department\",\n      description: \"Complete framework for starting and scaling your department\",\n      duration: \"90 min\",\n      level: \"All Levels\",\n      category: \"business\",\n      icon: \"GraduationCap\",\n      sortOrder: 4,\n    },\n    {\n      title: \"Commercial Roofing Sales Strategies\",\n      description: \"Proven techniques for winning large commercial contracts\",\n      duration: \"75 min\",\n      level: \"Intermediate\",\n      category: \"business\",\n      icon: \"Users\",\n      sortOrder: 5,\n    },\n    {\n      title: \"Project Management Best Practices\",\n      description: \"Efficiently manage multiple commercial roofing projects\",\n      duration: \"80 min\",\n      level: \"Advanced\",\n      category: \"business\",\n      icon: \"FileText\",\n      sortOrder: 6,\n    },\n  ];\n\n  const resources = [\n    {\n      title: \"RooFix AI User Manual\",\n      description: \"Comprehensive documentation for all platform features\",\n      icon: \"BookOpen\",\n      sortOrder: 1,\n    },\n    {\n      title: \"Industry Best Practices Guide\",\n      description: \"Expert insights and standards for commercial roofing\",\n      icon: \"FileText\",\n      sortOrder: 2,\n    },\n    {\n      title: \"Video Tutorial Library\",\n      description: \"Access our complete collection of training videos\",\n      icon: \"Video\",\n      sortOrder: 3,\n    },\n  ];\n\n  try {\n    // Seed courses\n    for (const course of [...appTrainingCourses, ...businessTrainingCourses]) {\n      await storage.createTrainingCourse(course);\n      console.log(`✓ Created course: ${course.title}`);\n    }\n\n    // Seed resources\n    for (const resource of resources) {\n      await storage.createTrainingResource(resource);\n      console.log(`✓ Created resource: ${resource.title}`);\n    }\n\n    console.log(\"\\n✅ Database seeding completed successfully!\");\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":2891},"server/storage.ts":{"content":"import { \n  type Lead, \n  type InsertLead, \n  type Contact, \n  type InsertContact,\n  type TrainingCourse,\n  type InsertTrainingCourse,\n  type TrainingResource,\n  type InsertTrainingResource,\n  type ManufacturerDocument,\n  type InsertManufacturerDocument,\n  leads,\n  contacts,\n  trainingCourses,\n  trainingResources,\n  manufacturerDocuments\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { asc, and, or, ilike, inArray, sql } from \"drizzle-orm\";\n\nexport interface ManufacturerDocumentFilters {\n  search?: string;\n  manufacturers?: string[];\n  systemTypes?: string[];\n  documentTypes?: string[];\n}\n\nexport interface IStorage {\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeads(): Promise<Lead[]>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n  getTrainingCourses(): Promise<TrainingCourse[]>;\n  createTrainingCourse(course: InsertTrainingCourse): Promise<TrainingCourse>;\n  getTrainingResources(): Promise<TrainingResource[]>;\n  createTrainingResource(resource: InsertTrainingResource): Promise<TrainingResource>;\n  getManufacturerDocuments(limit?: number, offset?: number, filters?: ManufacturerDocumentFilters): Promise<ManufacturerDocument[]>;\n  getManufacturerDocumentsCount(filters?: ManufacturerDocumentFilters): Promise<number>;\n  createManufacturerDocument(document: InsertManufacturerDocument): Promise<ManufacturerDocument>;\n}\n\nexport class DbStorage implements IStorage {\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db.insert(leads).values(insertLead).returning();\n    return lead;\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads);\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db.insert(contacts).values(insertContact).returning();\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts);\n  }\n\n  async getTrainingCourses(): Promise<TrainingCourse[]> {\n    return await db.select().from(trainingCourses).orderBy(asc(trainingCourses.sortOrder));\n  }\n\n  async createTrainingCourse(course: InsertTrainingCourse): Promise<TrainingCourse> {\n    const [newCourse] = await db.insert(trainingCourses).values(course).returning();\n    return newCourse;\n  }\n\n  async getTrainingResources(): Promise<TrainingResource[]> {\n    return await db.select().from(trainingResources).orderBy(asc(trainingResources.sortOrder));\n  }\n\n  async createTrainingResource(resource: InsertTrainingResource): Promise<TrainingResource> {\n    const [newResource] = await db.insert(trainingResources).values(resource).returning();\n    return newResource;\n  }\n\n  async getManufacturerDocuments(limit?: number, offset?: number, filters?: ManufacturerDocumentFilters): Promise<ManufacturerDocument[]> {\n    const conditions = this.buildFilterConditions(filters);\n    \n    let query = db.select().from(manufacturerDocuments);\n    \n    if (conditions) {\n      query = query.where(conditions) as any;\n    }\n    \n    query = query.orderBy(asc(manufacturerDocuments.manufacturer), asc(manufacturerDocuments.documentTitle)) as any;\n    \n    if (limit !== undefined) {\n      query = query.limit(limit) as any;\n    }\n    \n    if (offset !== undefined) {\n      query = query.offset(offset) as any;\n    }\n    \n    return await query;\n  }\n\n  async getManufacturerDocumentsCount(filters?: ManufacturerDocumentFilters): Promise<number> {\n    const conditions = this.buildFilterConditions(filters);\n    \n    let query = db.select({ count: sql<number>`count(*)` }).from(manufacturerDocuments);\n    \n    if (conditions) {\n      query = query.where(conditions) as any;\n    }\n    \n    const result = await query;\n    return Number(result[0]?.count || 0);\n  }\n\n  private buildFilterConditions(filters?: ManufacturerDocumentFilters) {\n    if (!filters) return undefined;\n    \n    const conditions = [];\n    \n    if (filters.search) {\n      conditions.push(ilike(manufacturerDocuments.documentTitle, `%${filters.search}%`));\n    }\n    \n    if (filters.manufacturers && filters.manufacturers.length > 0) {\n      conditions.push(inArray(manufacturerDocuments.manufacturer, filters.manufacturers));\n    }\n    \n    if (filters.systemTypes && filters.systemTypes.length > 0) {\n      conditions.push(inArray(manufacturerDocuments.systemType, filters.systemTypes));\n    }\n    \n    if (filters.documentTypes && filters.documentTypes.length > 0) {\n      conditions.push(inArray(manufacturerDocuments.documentType, filters.documentTypes));\n    }\n    \n    return conditions.length > 0 ? and(...conditions) : undefined;\n  }\n\n  async createManufacturerDocument(document: InsertManufacturerDocument): Promise<ManufacturerDocument> {\n    const [newDocument] = await db.insert(manufacturerDocuments).values(document).returning();\n    return newDocument;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":4935},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  phone: text(\"phone\"),\n  role: text(\"role\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  phone: text(\"phone\"),\n  inquiryType: text(\"inquiry_type\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\n\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n\nexport const trainingCourses = pgTable(\"training_courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  duration: text(\"duration\").notNull(),\n  level: text(\"level\").notNull(),\n  category: text(\"category\").notNull(),\n  icon: text(\"icon\").notNull(),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const trainingResources = pgTable(\"training_resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertTrainingCourseSchema = createInsertSchema(trainingCourses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTrainingResourceSchema = createInsertSchema(trainingResources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertTrainingCourse = z.infer<typeof insertTrainingCourseSchema>;\nexport type TrainingCourse = typeof trainingCourses.$inferSelect;\n\nexport type InsertTrainingResource = z.infer<typeof insertTrainingResourceSchema>;\nexport type TrainingResource = typeof trainingResources.$inferSelect;\n\nexport const manufacturerDocuments = pgTable(\"manufacturer_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  manufacturer: text(\"manufacturer\").notNull(),\n  documentTitle: text(\"document_title\").notNull(),\n  documentType: text(\"document_type\").notNull(),\n  systemType: text(\"system_type\").notNull(),\n  documentUrl: text(\"document_url\").notNull(),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  dateAdded: timestamp(\"date_added\").defaultNow().notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\nexport const insertManufacturerDocumentSchema = createInsertSchema(manufacturerDocuments).omit({\n  id: true,\n  dateAdded: true,\n  lastUpdated: true,\n});\n\nexport type InsertManufacturerDocument = z.infer<typeof insertManufacturerDocumentSchema>;\nexport type ManufacturerDocument = typeof manufacturerDocuments.$inferSelect;\n","size_bytes":4127},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Features from \"@/pages/features\";\nimport Tools from \"@/pages/tools\";\nimport Pricing from \"@/pages/pricing\";\nimport Store from \"@/pages/store\";\nimport TrainingCenter from \"@/pages/training-center\";\nimport ManufacturerDocuments from \"@/pages/manufacturer-documents\";\nimport Contact from \"@/pages/contact\";\nimport Navigation from \"@/components/navigation\";\n\nfunction Router() {\n  return (\n    <>\n      <div className=\"cyberpunk-grid\" />\n      <div className=\"content-layer\">\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/features\" component={Features} />\n          <Route path=\"/tools\" component={Tools} />\n          <Route path=\"/pricing\" component={Pricing} />\n          <Route path=\"/store\" component={Store} />\n          <Route path=\"/training-center\" component={TrainingCenter} />\n          <Route path=\"/manufacturer-documents\" component={ManufacturerDocuments} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1723},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(0, 0%, 5%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(0, 0%, 5%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(197, 100%, 55%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 10%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(197, 20%, 60%);\n  --accent: hsl(197, 100%, 55%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 100%, 50%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(197, 100%, 55%);\n  --input: hsl(0, 0%, 10%);\n  --ring: hsl(197, 100%, 55%);\n  --radius: 4px;\n  --font-sans: 'Inter', sans-serif;\n  --font-display: 'Orbitron', sans-serif;\n  --logo-blue: hsl(197, 100%, 55%);\n  --logo-white: hsl(0, 0%, 95%);\n  --glow-color: hsla(197, 100%, 55%, 0.6);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    position: relative;\n    overflow-x: hidden;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-display);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n  }\n}\n\n@keyframes gridMove {\n  0% {\n    background-position: 0 0, 0 0;\n  }\n  100% {\n    background-position: 50px 50px, 50px 50px;\n  }\n}\n\n@keyframes glowPulse {\n  0%, 100% {\n    text-shadow: \n      0 0 10px var(--glow-color),\n      0 0 20px var(--glow-color),\n      0 0 30px var(--glow-color),\n      0 0 40px var(--logo-blue);\n  }\n  50% {\n    text-shadow: \n      0 0 5px var(--glow-color),\n      0 0 10px var(--glow-color),\n      0 0 15px var(--glow-color),\n      0 0 20px var(--logo-blue);\n  }\n}\n\n@keyframes borderGlow {\n  0%, 100% {\n    box-shadow: \n      0 0 5px var(--glow-color),\n      0 0 10px var(--glow-color),\n      inset 0 0 5px var(--glow-color);\n  }\n  50% {\n    box-shadow: \n      0 0 10px var(--glow-color),\n      0 0 20px var(--glow-color),\n      inset 0 0 10px var(--glow-color);\n  }\n}\n\n@layer utilities {\n  .cyberpunk-grid {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #000;\n    background-image: \n      linear-gradient(rgba(27, 156, 252, 0.1) 1px, transparent 1px),\n      linear-gradient(90deg, rgba(27, 156, 252, 0.1) 1px, transparent 1px);\n    background-size: 50px 50px;\n    animation: gridMove 20s linear infinite;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  .cyberpunk-grid::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: radial-gradient(circle at 50% 50%, rgba(27, 156, 252, 0.05) 0%, transparent 70%);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(197, 100%, 55%), hsl(197, 100%, 75%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    animation: glowPulse 3s ease-in-out infinite;\n  }\n  \n  .neon-glow {\n    text-shadow: \n      0 0 10px var(--glow-color),\n      0 0 20px var(--glow-color),\n      0 0 30px var(--glow-color),\n      0 0 40px var(--logo-blue);\n    animation: glowPulse 3s ease-in-out infinite;\n  }\n\n  .glow-effect {\n    box-shadow: \n      0 0 20px var(--glow-color),\n      0 0 40px var(--glow-color),\n      inset 0 0 20px var(--glow-color);\n    animation: borderGlow 3s ease-in-out infinite;\n  }\n\n  .glow-border {\n    border: 2px solid var(--logo-blue);\n    box-shadow: \n      0 0 10px var(--glow-color),\n      0 0 20px var(--glow-color),\n      inset 0 0 10px var(--glow-color);\n    animation: borderGlow 3s ease-in-out infinite;\n  }\n  \n  .nav-blur {\n    backdrop-filter: blur(12px);\n    background-color: rgba(0, 0, 0, 0.9);\n    border-bottom: 2px solid var(--logo-blue);\n    box-shadow: 0 0 20px var(--glow-color);\n  }\n  \n  .hero-grid {\n    position: relative;\n    background-image: \n      radial-gradient(circle at 25% 25%, rgba(27, 156, 252, 0.15) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, rgba(27, 156, 252, 0.15) 0%, transparent 50%);\n  }\n\n  .content-layer {\n    position: relative;\n    z-index: 1;\n  }\n}\n","size_bytes":4283},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/lead-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertLeadSchema, type InsertLead } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function LeadForm() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertLead>({\n    resolver: zodResolver(insertLeadSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      company: undefined,\n      phone: undefined,\n      role: undefined,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertLead) => {\n      return await apiRequest(\"POST\", \"/api/leads\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome to the Revolution!\",\n        description: \"Thank you for joining. We'll contact you soon.\",\n      });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertLead) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <div className=\"bg-black/90 glow-border rounded-lg p-8\">\n      <h3 className=\"text-2xl font-bold mb-6 text-center neon-glow\">Join The Revolution</h3>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"firstName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>First Name *</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                      data-testid=\"input-firstName\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"lastName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Last Name *</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                      data-testid=\"input-lastName\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email Address *</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"email\"\n                    {...field}\n                    className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                    data-testid=\"input-email\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Company Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    value={field.value ?? \"\"}\n                    className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                    data-testid=\"input-company\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone Number</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"tel\"\n                    {...field}\n                    value={field.value ?? \"\"}\n                    className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                    data-testid=\"input-phone\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"role\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Role in Commercial Roofing</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value ?? undefined}>\n                  <FormControl>\n                    <SelectTrigger className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\" data-testid=\"select-role\">\n                      <SelectValue placeholder=\"Select your role\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"contractor\">Roofing Contractor</SelectItem>\n                    <SelectItem value=\"sales\">Sales Professional</SelectItem>\n                    <SelectItem value=\"facility\">Facility Manager</SelectItem>\n                    <SelectItem value=\"owner\">Building Owner</SelectItem>\n                    <SelectItem value=\"consultant\">Roofing Consultant</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary text-black font-bold py-4 text-lg hover:bg-primary glow-effect uppercase tracking-wider\"\n            disabled={mutation.isPending}\n            data-testid=\"button-submit-lead\"\n          >\n            {mutation.isPending ? \"Joining...\" : \"Join the Revolution\"}\n          </Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":6732},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport logoImage from \"@assets/roofix-logo.png\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/features\", label: \"Features\" },\n    { href: \"/tools\", label: \"Tools\" },\n    { href: \"/pricing\", label: \"Pricing\" },\n    { href: \"/store\", label: \"Store\" },\n    { href: \"/training-center\", label: \"RooFix Academy\" },\n    { href: \"/manufacturer-documents\", label: \"Documents\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") {\n      return location === href;\n    }\n    return location.startsWith(href);\n  };\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 nav-blur border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" data-testid=\"link-logo\" className=\"flex items-center\">\n            <img\n              src={logoImage}\n              alt=\"RooFix AI\"\n              className=\"h-16 w-auto\"\n            />\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  data-testid={`link-${link.label.toLowerCase()}`}\n                  className={`transition-colors duration-200 ${\n                    isActive(link.href)\n                      ? \"text-foreground font-semibold\"\n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* Mobile Navigation */}\n          <Sheet>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"bg-card\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                {navLinks.map((link) => (\n                  <Link\n                    key={link.href}\n                    href={link.href}\n                    data-testid={`link-mobile-${link.label.toLowerCase()}`}\n                    className={`text-lg transition-colors duration-200 ${\n                      isActive(link.href)\n                        ? \"text-foreground font-semibold\"\n                        : \"text-muted-foreground hover:text-primary\"\n                    }`}\n                  >\n                    {link.label}\n                  </Link>\n                ))}\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3194},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Rocket, Shield, Users } from \"lucide-react\";\nimport missionImage from \"@assets/Gemini_Generated_Image_9oagvv9oagvv9oag_1759330245361.png\";\nimport visionImage from \"@assets/Gemini_Generated_Image_lqcy8qlqcy8qlqcy_1759330640672.png\";\n\nexport default function About() {\n  const values = [\n    {\n      icon: Rocket,\n      title: \"Innovation First\",\n      description: \"Pushing boundaries and challenging the status quo in every solution we deliver.\",\n    },\n    {\n      icon: Shield,\n      title: \"Reliability\",\n      description: \"Building trust through consistent, accurate, and dependable AI-powered solutions.\",\n    },\n    {\n      icon: Users,\n      title: \"Partnership\",\n      description: \"Growing together with our clients to transform the entire industry landscape.\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6 text-white\">\n              About <span className=\"gradient-text neon-glow\">RooFix AI</span>\n            </h1>\n            <p className=\"text-xl text-primary max-w-3xl mx-auto\">\n              Transforming commercial roofing through revolutionary AI technology that changes everything.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center mb-20\">\n            <div className=\"space-y-6\">\n              <h2 className=\"text-3xl font-bold neon-glow\">Our Mission</h2>\n              <p className=\"text-lg text-white leading-relaxed\">\n                RooFix AI exists to revolutionize the commercial roofing industry through cutting-edge artificial intelligence. We believe that every roofing professional deserves tools that don't just keep up with the competition—they leave it behind.\n              </p>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                Our platform transforms how proposals are generated, inspections are analyzed, and costs are estimated. This isn't automation—it's evolution.\n              </p>\n            </div>\n            <img\n              src={missionImage}\n              alt=\"Commercial roofing with city skyline\"\n              className=\"rounded-xl shadow-lg w-full h-auto\"\n            />\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <img\n              src={visionImage}\n              alt=\"Roofing professionals with AI technology\"\n              className=\"rounded-xl shadow-lg w-full h-auto lg:order-1\"\n            />\n            <div className=\"space-y-6 lg:order-2\">\n              <h2 className=\"text-3xl font-bold neon-glow\">Our Vision</h2>\n              <p className=\"text-lg text-white leading-relaxed\">\n                We envision a future where commercial roofing professionals are empowered by AI that thinks faster, analyzes deeper, and delivers solutions that seemed impossible just yesterday.\n              </p>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                &quot;Resistance is futile. RooFix AI is inevitable.&quot; And when your competitors discover what you've been using, they'll call it the new era. You'll remember it as your moment.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-20 bg-black/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center mb-16 neon-glow\">Our Core Values</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {values.map((value, index) => {\n              const Icon = value.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"text-center space-y-4 p-6 bg-black/80 rounded-lg glow-border\"\n                  data-testid={`card-value-${index}`}\n                >\n                  <Icon className=\"h-12 w-12 text-primary mx-auto\" />\n                  <h3 className=\"text-xl font-bold text-primary\">{value.title}</h3>\n                  <p className=\"text-gray-300\">{value.description}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":4366},"client/src/pages/contact.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertContactSchema, type InsertContact } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Mail, Phone, MapPin } from \"lucide-react\";\nimport { SiX, SiLinkedin, SiYoutube } from \"react-icons/si\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      company: undefined,\n      phone: undefined,\n      inquiryType: undefined,\n      message: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      return await apiRequest(\"POST\", \"/api/contacts\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"We'll get back to you as soon as possible.\",\n      });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Send\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6 text-white\">\n              Ready to <span className=\"gradient-text neon-glow\">Transform</span> Your Business?\n            </h1>\n            <p className=\"text-xl text-primary max-w-3xl mx-auto\">\n              You're already too late. But you're still early. Contact us to begin your revolution.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <div className=\"bg-black/90 rounded-xl p-8 glow-border\">\n              <h2 className=\"text-2xl font-bold mb-6 neon-glow\">Get In Touch</h2>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name *</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                              data-testid=\"input-contact-firstName\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name *</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                              data-testid=\"input-contact-lastName\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address *</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"email\"\n                            {...field}\n                            className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                            data-testid=\"input-contact-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"company\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Company Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            value={field.value ?? \"\"}\n                            className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                            data-testid=\"input-contact-company\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"tel\"\n                            {...field}\n                            value={field.value ?? \"\"}\n                            className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\"\n                            data-testid=\"input-contact-phone\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"inquiryType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Inquiry Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value ?? undefined}>\n                          <FormControl>\n                            <SelectTrigger className=\"bg-black border-primary focus:border-primary focus:ring-primary text-white glow-border\" data-testid=\"select-inquiry\">\n                              <SelectValue placeholder=\"Select inquiry type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"demo\">Request Demo</SelectItem>\n                            <SelectItem value=\"pricing\">Pricing Information</SelectItem>\n                            <SelectItem value=\"support\">Technical Support</SelectItem>\n                            <SelectItem value=\"partnership\">Partnership Opportunities</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"message\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Message *</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            {...field}\n                            rows={5}\n                            className=\"bg-input border-border resize-none\"\n                            placeholder=\"Tell us about your roofing business and how RooFix AI can help...\"\n                            data-testid=\"textarea-message\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-primary text-black font-bold py-4 text-lg hover:bg-primary glow-effect uppercase tracking-wider\"\n                    disabled={mutation.isPending}\n                    data-testid=\"button-submit-contact\"\n                  >\n                    {mutation.isPending ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </Form>\n            </div>\n\n            {/* Company Information */}\n            <div className=\"space-y-8\">\n              <div className=\"bg-black/90 rounded-xl p-8 glow-border\">\n                <h3 className=\"text-xl font-bold mb-4 text-primary\">Contact Information</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start\">\n                    <Mail className=\"h-6 w-6 text-primary mr-4 mt-1 flex-shrink-0\" />\n                    <div>\n                      <p className=\"font-semibold\">Email</p>\n                      <p className=\"text-muted-foreground\">hello@roofix.ai</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <Phone className=\"h-6 w-6 text-primary mr-4 mt-1 flex-shrink-0\" />\n                    <div>\n                      <p className=\"font-semibold\">Phone</p>\n                      <p className=\"text-muted-foreground\">+1 (555) 123-ROOF</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <MapPin className=\"h-6 w-6 text-primary mr-4 mt-1 flex-shrink-0\" />\n                    <div>\n                      <p className=\"font-semibold\">Address</p>\n                      <p className=\"text-muted-foreground\">\n                        123 Innovation Drive<br />\n                        Tech Valley, CA 94105<br />\n                        United States\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-black/90 rounded-xl p-8 glow-border\">\n                <h3 className=\"text-xl font-bold mb-4 text-primary\">Business Hours</h3>\n                <div className=\"space-y-2 text-muted-foreground\">\n                  <div className=\"flex justify-between\">\n                    <span>Monday - Friday</span>\n                    <span>9:00 AM - 6:00 PM PST</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Saturday</span>\n                    <span>10:00 AM - 4:00 PM PST</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Sunday</span>\n                    <span>Closed</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-black/90 rounded-xl p-8 glow-border\">\n                <h3 className=\"text-xl font-bold mb-4 text-primary\">Follow Us</h3>\n                <div className=\"flex space-x-4\">\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    data-testid=\"link-twitter\"\n                  >\n                    <SiX className=\"h-6 w-6\" />\n                  </a>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    data-testid=\"link-linkedin\"\n                  >\n                    <SiLinkedin className=\"h-6 w-6\" />\n                  </a>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                    data-testid=\"link-youtube\"\n                  >\n                    <SiYoutube className=\"h-6 w-6\" />\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":12969},"client/src/pages/contractor-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calculator, Ruler, DollarSign, Layers, Package, Percent } from \"lucide-react\";\n\nexport default function ContractorTools() {\n  const [materialCalc, setMaterialCalc] = useState({\n    length: \"\",\n    width: \"\",\n    wastePercent: \"10\",\n    rollWidth: \"10\",\n  });\n\n  const [costEstimator, setCostEstimator] = useState({\n    squareFeet: \"\",\n    materialCostPerSqFt: \"\",\n    laborCostPerSqFt: \"\",\n    overheadPercent: \"15\",\n    profitMargin: \"20\",\n  });\n\n  const [slopeCalc, setSlopeCalc] = useState({\n    rise: \"\",\n    run: \"\",\n  });\n\n  const [membraneCalc, setMembraneCalc] = useState({\n    squareFeet: \"\",\n    thickness: \"60\",\n    wastePercent: \"10\",\n  });\n\n  // Material Calculator\n  const calculateMaterial = () => {\n    const area = parseFloat(materialCalc.length) * parseFloat(materialCalc.width);\n    const wasteMultiplier = 1 + parseFloat(materialCalc.wastePercent) / 100;\n    const totalArea = area * wasteMultiplier;\n    const rollWidth = parseFloat(materialCalc.rollWidth);\n    const rollsNeeded = Math.ceil(totalArea / (rollWidth * 100));\n    \n    return {\n      area: area.toFixed(2),\n      totalWithWaste: totalArea.toFixed(2),\n      rollsNeeded,\n      squares: (area / 100).toFixed(2),\n    };\n  };\n\n  // Cost Estimator\n  const calculateCost = () => {\n    const sqFt = parseFloat(costEstimator.squareFeet);\n    const materialCost = sqFt * parseFloat(costEstimator.materialCostPerSqFt);\n    const laborCost = sqFt * parseFloat(costEstimator.laborCostPerSqFt);\n    const subtotal = materialCost + laborCost;\n    const overhead = subtotal * (parseFloat(costEstimator.overheadPercent) / 100);\n    const totalWithOverhead = subtotal + overhead;\n    const profit = totalWithOverhead * (parseFloat(costEstimator.profitMargin) / 100);\n    const finalTotal = totalWithOverhead + profit;\n\n    return {\n      materialCost: materialCost.toFixed(2),\n      laborCost: laborCost.toFixed(2),\n      overhead: overhead.toFixed(2),\n      profit: profit.toFixed(2),\n      total: finalTotal.toFixed(2),\n    };\n  };\n\n  // Slope Calculator\n  const calculateSlope = () => {\n    const rise = parseFloat(slopeCalc.rise);\n    const run = parseFloat(slopeCalc.run);\n    const slopeDegrees = Math.atan(rise / run) * (180 / Math.PI);\n    const slopeRatio = `${rise}:${run}`;\n    const pitchRatio = `${(rise / run * 12).toFixed(2)}:12`;\n\n    return {\n      degrees: slopeDegrees.toFixed(2),\n      ratio: slopeRatio,\n      pitch: pitchRatio,\n    };\n  };\n\n  // Membrane Calculator\n  const calculateMembrane = () => {\n    const sqFt = parseFloat(membraneCalc.squareFeet);\n    const thickness = parseFloat(membraneCalc.thickness);\n    const wasteMultiplier = 1 + parseFloat(membraneCalc.wastePercent) / 100;\n    const totalSqFt = sqFt * wasteMultiplier;\n    const squares = sqFt / 100;\n\n    return {\n      totalSqFt: totalSqFt.toFixed(2),\n      squares: squares.toFixed(2),\n      thickness: thickness,\n    };\n  };\n\n  const materialResults = materialCalc.length && materialCalc.width ? calculateMaterial() : null;\n  const costResults = costEstimator.squareFeet && costEstimator.materialCostPerSqFt && costEstimator.laborCostPerSqFt ? calculateCost() : null;\n  const slopeResults = slopeCalc.rise && slopeCalc.run ? calculateSlope() : null;\n  const membraneResults = membraneCalc.squareFeet ? calculateMembrane() : null;\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-5xl md:text-6xl font-black mb-6\">\n            <span className=\"gradient-text neon-glow\">Contractor Tools</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Professional calculators and utilities for commercial roofing contractors\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Material Calculator */}\n          <Card className=\"glow-border bg-black/80 backdrop-blur-sm\" data-testid=\"card-material-calculator\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Calculator className=\"h-6 w-6 text-primary\" />\n                Material Calculator\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Calculate roofing materials needed based on roof dimensions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"mat-length\" className=\"text-gray-300\">Length (ft)</Label>\n                  <Input\n                    id=\"mat-length\"\n                    type=\"number\"\n                    value={materialCalc.length}\n                    onChange={(e) => setMaterialCalc({ ...materialCalc, length: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-material-length\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"mat-width\" className=\"text-gray-300\">Width (ft)</Label>\n                  <Input\n                    id=\"mat-width\"\n                    type=\"number\"\n                    value={materialCalc.width}\n                    onChange={(e) => setMaterialCalc({ ...materialCalc, width: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-material-width\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"mat-waste\" className=\"text-gray-300\">Waste Factor (%)</Label>\n                  <Input\n                    id=\"mat-waste\"\n                    type=\"number\"\n                    value={materialCalc.wastePercent}\n                    onChange={(e) => setMaterialCalc({ ...materialCalc, wastePercent: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-material-waste\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"mat-roll\" className=\"text-gray-300\">Roll Width (ft)</Label>\n                  <Input\n                    id=\"mat-roll\"\n                    type=\"number\"\n                    value={materialCalc.rollWidth}\n                    onChange={(e) => setMaterialCalc({ ...materialCalc, rollWidth: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-material-roll\"\n                  />\n                </div>\n              </div>\n\n              {materialResults && (\n                <div className=\"mt-6 p-4 bg-primary/10 border border-primary rounded-lg space-y-2\" data-testid=\"result-material\">\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Base Area:</span>\n                    <span className=\"text-primary font-bold\">{materialResults.area} sq ft</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>With Waste:</span>\n                    <span className=\"text-primary font-bold\">{materialResults.totalWithWaste} sq ft</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Squares:</span>\n                    <span className=\"text-primary font-bold\">{materialResults.squares}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Rolls Needed:</span>\n                    <span className=\"text-primary font-bold\">{materialResults.rollsNeeded}</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Cost Estimator */}\n          <Card className=\"glow-border bg-black/80 backdrop-blur-sm\" data-testid=\"card-cost-estimator\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <DollarSign className=\"h-6 w-6 text-primary\" />\n                Cost Estimator\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Estimate total project costs including overhead and profit\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"cost-sqft\" className=\"text-gray-300\">Square Footage</Label>\n                <Input\n                  id=\"cost-sqft\"\n                  type=\"number\"\n                  value={costEstimator.squareFeet}\n                  onChange={(e) => setCostEstimator({ ...costEstimator, squareFeet: e.target.value })}\n                  className=\"bg-black/50 border-primary/30 text-white\"\n                  data-testid=\"input-cost-sqft\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cost-material\" className=\"text-gray-300\">Material $/sq ft</Label>\n                  <Input\n                    id=\"cost-material\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={costEstimator.materialCostPerSqFt}\n                    onChange={(e) => setCostEstimator({ ...costEstimator, materialCostPerSqFt: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-cost-material\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cost-labor\" className=\"text-gray-300\">Labor $/sq ft</Label>\n                  <Input\n                    id=\"cost-labor\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={costEstimator.laborCostPerSqFt}\n                    onChange={(e) => setCostEstimator({ ...costEstimator, laborCostPerSqFt: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-cost-labor\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cost-overhead\" className=\"text-gray-300\">Overhead (%)</Label>\n                  <Input\n                    id=\"cost-overhead\"\n                    type=\"number\"\n                    value={costEstimator.overheadPercent}\n                    onChange={(e) => setCostEstimator({ ...costEstimator, overheadPercent: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-cost-overhead\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cost-profit\" className=\"text-gray-300\">Profit Margin (%)</Label>\n                  <Input\n                    id=\"cost-profit\"\n                    type=\"number\"\n                    value={costEstimator.profitMargin}\n                    onChange={(e) => setCostEstimator({ ...costEstimator, profitMargin: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-cost-profit\"\n                  />\n                </div>\n              </div>\n\n              {costResults && (\n                <div className=\"mt-6 p-4 bg-primary/10 border border-primary rounded-lg space-y-2\" data-testid=\"result-cost\">\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Material Cost:</span>\n                    <span className=\"text-white\">${costResults.materialCost}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Labor Cost:</span>\n                    <span className=\"text-white\">${costResults.laborCost}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Overhead:</span>\n                    <span className=\"text-white\">${costResults.overhead}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Profit:</span>\n                    <span className=\"text-white\">${costResults.profit}</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-bold border-t border-primary/30 pt-2 mt-2\">\n                    <span className=\"text-primary\">Total Estimate:</span>\n                    <span className=\"text-primary\">${costResults.total}</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Slope/Pitch Calculator */}\n          <Card className=\"glow-border bg-black/80 backdrop-blur-sm\" data-testid=\"card-slope-calculator\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Ruler className=\"h-6 w-6 text-primary\" />\n                Slope/Pitch Calculator\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Calculate roof slope and pitch from rise and run\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"slope-rise\" className=\"text-gray-300\">Rise (inches)</Label>\n                  <Input\n                    id=\"slope-rise\"\n                    type=\"number\"\n                    value={slopeCalc.rise}\n                    onChange={(e) => setSlopeCalc({ ...slopeCalc, rise: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-slope-rise\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"slope-run\" className=\"text-gray-300\">Run (inches)</Label>\n                  <Input\n                    id=\"slope-run\"\n                    type=\"number\"\n                    value={slopeCalc.run}\n                    onChange={(e) => setSlopeCalc({ ...slopeCalc, run: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-slope-run\"\n                  />\n                </div>\n              </div>\n\n              {slopeResults && (\n                <div className=\"mt-6 p-4 bg-primary/10 border border-primary rounded-lg space-y-2\" data-testid=\"result-slope\">\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Slope (degrees):</span>\n                    <span className=\"text-primary font-bold\">{slopeResults.degrees}°</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Slope Ratio:</span>\n                    <span className=\"text-primary font-bold\">{slopeResults.ratio}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Pitch:</span>\n                    <span className=\"text-primary font-bold\">{slopeResults.pitch}</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Membrane Quantity Calculator */}\n          <Card className=\"glow-border bg-black/80 backdrop-blur-sm\" data-testid=\"card-membrane-calculator\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Layers className=\"h-6 w-6 text-primary\" />\n                Membrane Quantity Calculator\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Calculate membrane quantities with waste factor\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"membrane-sqft\" className=\"text-gray-300\">Square Footage</Label>\n                  <Input\n                    id=\"membrane-sqft\"\n                    type=\"number\"\n                    value={membraneCalc.squareFeet}\n                    onChange={(e) => setMembraneCalc({ ...membraneCalc, squareFeet: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-membrane-sqft\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"membrane-thickness\" className=\"text-gray-300\">Thickness (mil)</Label>\n                  <Select\n                    value={membraneCalc.thickness}\n                    onValueChange={(value) => setMembraneCalc({ ...membraneCalc, thickness: value })}\n                  >\n                    <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-membrane-thickness\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"45\">45 mil</SelectItem>\n                      <SelectItem value=\"60\">60 mil</SelectItem>\n                      <SelectItem value=\"80\">80 mil</SelectItem>\n                      <SelectItem value=\"90\">90 mil</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"membrane-waste\" className=\"text-gray-300\">Waste Factor (%)</Label>\n                <Input\n                  id=\"membrane-waste\"\n                  type=\"number\"\n                  value={membraneCalc.wastePercent}\n                  onChange={(e) => setMembraneCalc({ ...membraneCalc, wastePercent: e.target.value })}\n                  className=\"bg-black/50 border-primary/30 text-white\"\n                  data-testid=\"input-membrane-waste\"\n                />\n              </div>\n\n              {membraneResults && (\n                <div className=\"mt-6 p-4 bg-primary/10 border border-primary rounded-lg space-y-2\" data-testid=\"result-membrane\">\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Total with Waste:</span>\n                    <span className=\"text-primary font-bold\">{membraneResults.totalSqFt} sq ft</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Squares:</span>\n                    <span className=\"text-primary font-bold\">{membraneResults.squares}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-300\">\n                    <span>Membrane Thickness:</span>\n                    <span className=\"text-primary font-bold\">{membraneResults.thickness} mil</span>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Waste Factor Guide */}\n          <Card className=\"glow-border bg-black/80 backdrop-blur-sm lg:col-span-2\" data-testid=\"card-waste-guide\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Percent className=\"h-6 w-6 text-primary\" />\n                Waste Factor Guide\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Industry standard waste factors for accurate material estimation\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-primary font-semibold\">Simple Roofs (5-10%)</h3>\n                  <p className=\"text-gray-300 text-sm\">Minimal cuts, few penetrations, standard rectangles</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-primary font-semibold\">Complex Roofs (10-15%)</h3>\n                  <p className=\"text-gray-300 text-sm\">Multiple sections, moderate penetrations, some angles</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-primary font-semibold\">Very Complex (15-20%)</h3>\n                  <p className=\"text-gray-300 text-sm\">Numerous penetrations, irregular shapes, extensive cuts</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Tips */}\n          <Card className=\"glow-border bg-black/80 backdrop-blur-sm lg:col-span-2\" data-testid=\"card-tips\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Package className=\"h-6 w-6 text-primary\" />\n                Professional Tips\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"flex gap-3\">\n                  <div className=\"h-2 w-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">Always account for overlaps, seams, and flashings in your material calculations</p>\n                </div>\n                <div className=\"flex gap-3\">\n                  <div className=\"h-2 w-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">For membrane systems, order 10-15% extra for field seams and end laps</p>\n                </div>\n                <div className=\"flex gap-3\">\n                  <div className=\"h-2 w-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">Include costs for substrate preparation and repairs in your estimates</p>\n                </div>\n                <div className=\"flex gap-3\">\n                  <div className=\"h-2 w-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">Consider local building codes and warranty requirements when estimating</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23183},"client/src/pages/features.tsx":{"content":"import { FileText, Search, Calculator, ChartLine, Target, RefreshCw, CheckCircle } from \"lucide-react\";\n\nexport default function Features() {\n  const mainFeatures = [\n    {\n      icon: FileText,\n      title: \"AI Proposal Generation\",\n      description: \"Generate comprehensive, professional proposals in minutes instead of hours. Our AI analyzes project requirements and creates detailed, competitive proposals automatically.\",\n      features: [\n        \"Instant proposal creation\",\n        \"Custom branding integration\",\n        \"Competitive pricing analysis\",\n        \"Professional formatting\",\n      ],\n    },\n    {\n      icon: Search,\n      title: \"Intelligent Inspection Analysis\",\n      description: \"Advanced AI analyzes roof conditions from photos and data, identifying issues, damage patterns, and recommending solutions with unprecedented accuracy.\",\n      features: [\n        \"Automated damage detection\",\n        \"Condition assessment scoring\",\n        \"Repair prioritization\",\n        \"Detailed reporting\",\n      ],\n    },\n    {\n      icon: Calculator,\n      title: \"Precision Cost Estimation\",\n      description: \"Get accurate cost estimates based on real-time material prices, labor rates, and project complexity. Turn 'later' into 'already handled.'\",\n      features: [\n        \"Real-time pricing data\",\n        \"Labor cost calculation\",\n        \"Material optimization\",\n        \"Profit margin analysis\",\n      ],\n    },\n  ];\n\n  const additionalFeatures = [\n    {\n      icon: ChartLine,\n      title: \"Performance Tracking\",\n      description: \"Monitor key metrics and KPIs in real-time\",\n    },\n    {\n      icon: Target,\n      title: \"Predictive Insights\",\n      description: \"AI-powered forecasting for better decision making\",\n    },\n    {\n      icon: RefreshCw,\n      title: \"Automated Reporting\",\n      description: \"Generate reports automatically for stakeholders\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6 text-white\">\n              AI-Powered <span className=\"gradient-text neon-glow\">Features</span>\n            </h1>\n            <p className=\"text-xl text-primary max-w-3xl mx-auto\">\n              The upgrade your rivals can't outwork. Once you see it, there's no going back.\n            </p>\n          </div>\n\n          {/* Main Features Grid */}\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-20\">\n            {mainFeatures.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"bg-black/80 rounded-xl p-8 glow-border hover:glow-effect transition-all duration-300\"\n                  data-testid={`card-feature-${index}`}\n                >\n                  <div className=\"mb-6\">\n                    <Icon className=\"h-12 w-12 text-primary mb-4\" />\n                    <h3 className=\"text-2xl font-bold mb-4 text-primary neon-glow\">{feature.title}</h3>\n                    <p className=\"text-gray-300 mb-6\">{feature.description}</p>\n                  </div>\n                  <ul className=\"space-y-2 text-sm\">\n                    {feature.features.map((item, idx) => (\n                      <li key={idx} className=\"flex items-center\">\n                        <CheckCircle className=\"h-4 w-4 text-primary mr-2 flex-shrink-0\" />\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Additional Features */}\n          <div className=\"grid md:grid-cols-2 gap-12 items-center mb-20\">\n            <div className=\"space-y-6\">\n              <h2 className=\"text-3xl font-bold neon-glow\">Advanced Analytics Dashboard</h2>\n              <p className=\"text-lg text-white\">\n                Imagine closing faster than they can open their laptop. Our analytics dashboard provides real-time insights into your business performance, project pipelines, and growth opportunities.\n              </p>\n              <ul className=\"space-y-3\">\n                {additionalFeatures.map((feature, index) => {\n                  const Icon = feature.icon;\n                  return (\n                    <li key={index} className=\"flex items-start\">\n                      <Icon className=\"h-6 w-6 text-primary mr-3 mt-1 flex-shrink-0\" />\n                      <div>\n                        <span className=\"font-semibold\">{feature.title}</span>\n                        <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <img\n              src=\"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\"\n              alt=\"Business analytics dashboard\"\n              className=\"rounded-xl shadow-lg w-full h-auto\"\n            />\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5259},"client/src/pages/home.tsx":{"content":"import LeadForm from \"@/components/lead-form\";\nimport { CheckCircle } from \"lucide-react\";\n\nexport default function Home() {\n  const revolutionaryStatements = [\n    {\n      title: \"You'll Wish Your Competitors Never Find This.\",\n      description: \"Everything Else is Already Obsolete.\",\n    },\n    {\n      title: \"This Isn't an Upgrade. It's an Intervention.\",\n      description: \"What Happens Next Changes Everything.\",\n    },\n    {\n      title: \"Trust your instincts—they're right.\",\n      description: \"Deep down, you knew this was coming.\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center hero-grid pt-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-6\">\n              <h1 className=\"text-5xl md:text-7xl font-black leading-tight text-white\">\n                Join the <span className=\"gradient-text neon-glow\">commercial roofing AI revolution</span> before it's too late\n              </h1>\n              <p className=\"text-xl md:text-2xl text-primary font-light\">\n                Commercial roofing will never be the same…\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <p className=\"text-lg font-medium text-foreground flex items-start\">\n                <CheckCircle className=\"h-6 w-6 mr-2 text-primary flex-shrink-0 mt-0.5\" />\n                Break every rule, win every contract. RooFix AI\n              </p>\n              <p className=\"text-lg font-medium text-foreground flex items-start\">\n                <CheckCircle className=\"h-6 w-6 mr-2 text-primary flex-shrink-0 mt-0.5\" />\n                It doesn't replace you. It unlocks you.\n              </p>\n              <p className=\"text-lg font-medium text-foreground flex items-start\">\n                <CheckCircle className=\"h-6 w-6 mr-2 text-primary flex-shrink-0 mt-0.5\" />\n                Welcome to the part where they can't keep up.\n              </p>\n            </div>\n          </div>\n\n          <LeadForm />\n        </div>\n      </section>\n\n      {/* Revolutionary Statements */}\n      <section className=\"py-20 bg-black/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {revolutionaryStatements.map((statement, index) => (\n              <div\n                key={index}\n                className=\"text-center space-y-4 p-6 glow-border rounded-lg bg-black/80\"\n                data-testid={`card-statement-${index}`}\n              >\n                <h3 className=\"text-2xl font-bold text-primary neon-glow\">&quot;{statement.title}&quot;</h3>\n                <p className=\"text-gray-300\">{statement.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":2998},"client/src/pages/manufacturer-documents.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { FileText, Search, Filter, Download, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { ManufacturerDocument } from \"@shared/schema\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nconst MANUFACTURERS = [\"GAF\", \"Versico\", \"Carlisle\", \"Johns Manville\", \"Holcim Elevate\"];\nconst SYSTEM_TYPES = [\"TPO\", \"PVC\", \"EPDM\", \"Asphalt\", \"Coatings\", \"Insulation\", \"Accessories\", \"General\"];\nconst DOCUMENT_TYPES = [\n  \"Product Data Sheet\",\n  \"Technical Bulletin\",\n  \"Installation Guide\",\n  \"Specification\",\n  \"Safety Data Sheet\",\n  \"Warranty\",\n];\n\nconst ITEMS_PER_PAGE = 24;\n\nexport default function ManufacturerDocuments() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedManufacturers, setSelectedManufacturers] = useState<string[]>([]);\n  const [selectedSystemTypes, setSelectedSystemTypes] = useState<string[]>([]);\n  const [selectedDocumentTypes, setSelectedDocumentTypes] = useState<string[]>([]);\n  const [showFilters, setShowFilters] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const limit = ITEMS_PER_PAGE;\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n  \n  const buildQueryString = () => {\n    const params = new URLSearchParams();\n    params.append('limit', limit.toString());\n    params.append('offset', offset.toString());\n    \n    if (searchQuery) {\n      params.append('search', searchQuery);\n    }\n    if (selectedManufacturers.length > 0) {\n      params.append('manufacturers', selectedManufacturers.join(','));\n    }\n    if (selectedSystemTypes.length > 0) {\n      params.append('systemTypes', selectedSystemTypes.join(','));\n    }\n    if (selectedDocumentTypes.length > 0) {\n      params.append('documentTypes', selectedDocumentTypes.join(','));\n    }\n    \n    return params.toString();\n  };\n  \n  const { data: apiResponse, isLoading } = useQuery<{\n    documents: ManufacturerDocument[];\n    total: number;\n    limit: number;\n    offset: number;\n  }>({\n    queryKey: [`/api/manufacturer-documents?${buildQueryString()}`],\n  });\n\n  const documents = apiResponse?.documents || [];\n  const totalDocuments = apiResponse?.total || 0;\n\n  const totalPages = Math.ceil(totalDocuments / ITEMS_PER_PAGE);\n  \n  const paginatedDocuments = documents;\n\n  const toggleFilter = (array: string[], setArray: (arr: string[]) => void, value: string) => {\n    if (array.includes(value)) {\n      setArray(array.filter((item) => item !== value));\n    } else {\n      setArray([...array, value]);\n    }\n    setCurrentPage(1);\n  };\n\n  const clearAllFilters = () => {\n    setSelectedManufacturers([]);\n    setSelectedSystemTypes([]);\n    setSelectedDocumentTypes([]);\n    setSearchQuery(\"\");\n    setCurrentPage(1);\n  };\n\n  const activeFiltersCount = selectedManufacturers.length + selectedSystemTypes.length + selectedDocumentTypes.length;\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-5xl md:text-6xl font-black mb-6 text-white\">\n            Manufacturer <span className=\"gradient-text neon-glow\">Documents</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Your Complete Resource Library\n          </p>\n        </div>\n\n        {/* Search and Filter Toggle */}\n        <div className=\"mb-8 flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search documents...\"\n              value={searchQuery}\n              onChange={(e) => {\n                setSearchQuery(e.target.value);\n                setCurrentPage(1);\n              }}\n              className=\"pl-10 bg-black/50 border-primary/30 text-white placeholder:text-gray-500\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"border-primary/30 text-primary hover:bg-primary/10\"\n            data-testid=\"button-toggle-filters\"\n          >\n            <Filter className=\"mr-2 h-5 w-5\" />\n            Filters {activeFiltersCount > 0 && `(${activeFiltersCount})`}\n          </Button>\n          {activeFiltersCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              onClick={clearAllFilters}\n              className=\"text-gray-400 hover:text-white\"\n              data-testid=\"button-clear-filters\"\n            >\n              Clear All\n            </Button>\n          )}\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Filter Sidebar */}\n          {showFilters && (\n            <aside className=\"lg:w-80 space-y-6\">\n              <Card className=\"glow-border bg-black/80 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-white text-lg\">Manufacturer</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {MANUFACTURERS.map((manufacturer) => (\n                    <div key={manufacturer} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`manufacturer-${manufacturer}`}\n                        checked={selectedManufacturers.includes(manufacturer)}\n                        onCheckedChange={() => toggleFilter(selectedManufacturers, setSelectedManufacturers, manufacturer)}\n                        className=\"border-primary data-[state=checked]:bg-primary data-[state=checked]:text-black\"\n                        data-testid={`checkbox-manufacturer-${manufacturer.toLowerCase().replace(/\\s+/g, '-')}`}\n                      />\n                      <Label\n                        htmlFor={`manufacturer-${manufacturer}`}\n                        className=\"text-gray-300 cursor-pointer\"\n                      >\n                        {manufacturer}\n                      </Label>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              <Card className=\"glow-border bg-black/80 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-white text-lg\">System Type</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {SYSTEM_TYPES.map((systemType) => (\n                    <div key={systemType} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`system-${systemType}`}\n                        checked={selectedSystemTypes.includes(systemType)}\n                        onCheckedChange={() => toggleFilter(selectedSystemTypes, setSelectedSystemTypes, systemType)}\n                        className=\"border-primary data-[state=checked]:bg-primary data-[state=checked]:text-black\"\n                        data-testid={`checkbox-system-${systemType.toLowerCase()}`}\n                      />\n                      <Label\n                        htmlFor={`system-${systemType}`}\n                        className=\"text-gray-300 cursor-pointer\"\n                      >\n                        {systemType}\n                      </Label>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              <Card className=\"glow-border bg-black/80 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-white text-lg\">Document Type</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {DOCUMENT_TYPES.map((docType) => (\n                    <div key={docType} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`doctype-${docType}`}\n                        checked={selectedDocumentTypes.includes(docType)}\n                        onCheckedChange={() => toggleFilter(selectedDocumentTypes, setSelectedDocumentTypes, docType)}\n                        className=\"border-primary data-[state=checked]:bg-primary data-[state=checked]:text-black\"\n                        data-testid={`checkbox-doctype-${docType.toLowerCase().replace(/\\s+/g, '-')}`}\n                      />\n                      <Label\n                        htmlFor={`doctype-${docType}`}\n                        className=\"text-gray-300 cursor-pointer\"\n                      >\n                        {docType}\n                      </Label>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </aside>\n          )}\n\n          {/* Main Content Area */}\n          <div className=\"flex-1\">\n            {isLoading ? (\n              <div className=\"text-center text-gray-400 py-12\">Loading documents...</div>\n            ) : totalDocuments === 0 ? (\n              <div className=\"text-center py-12\">\n                <FileText className=\"h-16 w-16 text-gray-600 mx-auto mb-4\" />\n                <p className=\"text-gray-400 text-lg\">No documents found</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"mb-6 flex justify-between items-center\">\n                  <div className=\"text-gray-400\">\n                    Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1}-{Math.min(currentPage * ITEMS_PER_PAGE, totalDocuments)} of {totalDocuments} document{totalDocuments !== 1 ? 's' : ''}\n                  </div>\n                  {totalPages > 1 && (\n                    <div className=\"text-gray-400\">\n                      Page {currentPage} of {totalPages}\n                    </div>\n                  )}\n                </div>\n                <div className=\"grid md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {paginatedDocuments.map((doc) => (\n                    <Card\n                      key={doc.id}\n                      className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                      data-testid={`card-document-${doc.id}`}\n                    >\n                      <CardHeader>\n                        <div className=\"flex justify-center mb-4\">\n                          {doc.thumbnailUrl ? (\n                            <img\n                              src={doc.thumbnailUrl}\n                              alt={doc.documentTitle}\n                              className=\"h-32 w-32 object-contain\"\n                            />\n                          ) : (\n                            <div className=\"h-32 w-32 flex items-center justify-center bg-primary/10 border-2 border-primary rounded\">\n                              <FileText className=\"h-16 w-16 text-primary\" />\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"mb-3 flex justify-center\">\n                          <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full border border-primary text-sm font-bold\" data-testid={`badge-manufacturer-${doc.id}`}>\n                            {doc.manufacturer}\n                          </span>\n                        </div>\n                        <CardTitle className=\"text-white text-center text-lg\" data-testid={`text-title-${doc.id}`}>\n                          {doc.documentTitle}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex flex-wrap gap-2 mb-4 justify-center\">\n                          <span className=\"px-3 py-1 bg-blue-500/20 text-blue-400 rounded-full border border-blue-500 text-xs\" data-testid={`badge-system-${doc.id}`}>\n                            {doc.systemType}\n                          </span>\n                          <span className=\"px-3 py-1 bg-purple-500/20 text-purple-400 rounded-full border border-purple-500 text-xs\" data-testid={`badge-doctype-${doc.id}`}>\n                            {doc.documentType}\n                          </span>\n                        </div>\n                        <Button\n                          className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold glow-effect\"\n                          onClick={() => window.open(doc.documentUrl, '_blank')}\n                          data-testid={`button-download-${doc.id}`}\n                        >\n                          <Download className=\"mr-2 h-5 w-5\" />\n                          Download\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                {/* Pagination Controls */}\n                {totalPages > 1 && (\n                  <div className=\"mt-8 flex justify-center items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                      disabled={currentPage === 1}\n                      className=\"border-primary/30 text-primary hover:bg-primary/10 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      data-testid=\"button-prev-page\"\n                    >\n                      <ChevronLeft className=\"h-5 w-5\" />\n                      Previous\n                    </Button>\n                    \n                    <div className=\"flex gap-2\">\n                      {[...Array(totalPages)].map((_, index) => {\n                        const page = index + 1;\n                        // Show first page, last page, current page, and pages around current\n                        const showPage = page === 1 || page === totalPages || (page >= currentPage - 1 && page <= currentPage + 1);\n                        const showEllipsis = (page === 2 && currentPage > 3) || (page === totalPages - 1 && currentPage < totalPages - 2);\n                        \n                        if (showEllipsis) {\n                          return <span key={page} className=\"text-gray-400 px-2\">...</span>;\n                        }\n                        \n                        if (!showPage) return null;\n                        \n                        return (\n                          <Button\n                            key={page}\n                            variant={currentPage === page ? \"default\" : \"outline\"}\n                            onClick={() => setCurrentPage(page)}\n                            className={currentPage === page \n                              ? \"bg-primary text-black hover:bg-primary/90\" \n                              : \"border-primary/30 text-primary hover:bg-primary/10\"\n                            }\n                            data-testid={`button-page-${page}`}\n                          >\n                            {page}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                      disabled={currentPage === totalPages}\n                      className=\"border-primary/30 text-primary hover:bg-primary/10 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      data-testid=\"button-next-page\"\n                    >\n                      Next\n                      <ChevronRight className=\"h-5 w-5\" />\n                    </Button>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16179},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Pricing() {\n  const plans = [\n    {\n      name: \"Starter\",\n      price: 99,\n      description: \"Perfect for small roofing businesses\",\n      features: [\n        \"Up to 25 proposals/month\",\n        \"Basic inspection analysis\",\n        \"Cost estimation tools\",\n        \"Email support\",\n        \"Mobile app access\",\n      ],\n      highlighted: false,\n    },\n    {\n      name: \"Professional\",\n      price: 299,\n      description: \"For growing roofing companies\",\n      features: [\n        \"Up to 100 proposals/month\",\n        \"Advanced AI inspection analysis\",\n        \"Precision cost estimation\",\n        \"Analytics dashboard\",\n        \"Priority support\",\n        \"Team collaboration tools\",\n        \"Custom branding\",\n      ],\n      highlighted: true,\n    },\n    {\n      name: \"Enterprise\",\n      price: 799,\n      description: \"For large roofing enterprises\",\n      features: [\n        \"Unlimited proposals\",\n        \"Enterprise AI features\",\n        \"Advanced analytics\",\n        \"API access\",\n        \"Dedicated support\",\n        \"Custom integrations\",\n        \"White-label options\",\n      ],\n      highlighted: false,\n    },\n  ];\n\n  const faqs = [\n    {\n      question: \"Can I upgrade or downgrade my plan at any time?\",\n      answer: \"Yes, you can change your plan at any time. Changes take effect immediately, and billing is prorated.\",\n    },\n    {\n      question: \"Is there a free trial available?\",\n      answer: \"We offer a 14-day free trial on all plans. No credit card required to start.\",\n    },\n    {\n      question: \"What kind of support do you provide?\",\n      answer: \"We provide email support for Starter plans, priority support for Professional plans, and dedicated support for Enterprise customers.\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6 text-white\">\n              Choose Your <span className=\"gradient-text neon-glow\">Revolution</span>\n            </h1>\n            <p className=\"text-xl text-primary max-w-3xl mx-auto\">\n              If you don't believe in unfair advantages… don't look at this. RooFix AI: Don't worry. Obsession is normal.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8 max-w-6xl mx-auto mb-20\">\n            {plans.map((plan, index) => (\n              <div\n                key={index}\n                className={`bg-black/90 rounded-xl p-8 relative ${\n                  plan.highlighted\n                    ? \"glow-border glow-effect\"\n                    : \"border-2 border-primary\"\n                }`}\n                data-testid={`card-plan-${plan.name.toLowerCase()}`}\n              >\n                {plan.highlighted && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-primary text-black px-4 py-2 rounded-full text-sm font-bold glow-effect uppercase tracking-wider\">\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold mb-2 text-primary neon-glow\">{plan.name}</h3>\n                  <p className=\"text-white mb-4\">{plan.description}</p>\n                  <div className=\"text-4xl font-black mb-2\">\n                    ${plan.price}\n                    <span className=\"text-lg font-normal text-muted-foreground\">/month</span>\n                  </div>\n                </div>\n                <ul className=\"space-y-4 mb-8\">\n                  {plan.features.map((feature, idx) => (\n                    <li key={idx} className=\"flex items-center\">\n                      <CheckCircle className=\"h-5 w-5 text-primary mr-3 flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                <Button\n                  className={`w-full font-bold py-3 uppercase tracking-wider ${\n                    plan.highlighted\n                      ? \"bg-primary text-black hover:bg-primary glow-effect\"\n                      : \"bg-secondary text-white hover:bg-secondary border-2 border-primary\"\n                  }`}\n                  data-testid={`button-${plan.name.toLowerCase()}`}\n                >\n                  {plan.name === \"Enterprise\" ? \"Contact Sales\" : plan.highlighted ? \"Start Revolution\" : \"Get Started\"}\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          {/* FAQ Section */}\n          <div className=\"mt-20\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 neon-glow\">Frequently Asked Questions</h2>\n            <div className=\"max-w-3xl mx-auto space-y-6\">\n              {faqs.map((faq, index) => (\n                <div\n                  key={index}\n                  className=\"bg-black/80 rounded-lg p-6 glow-border\"\n                  data-testid={`card-faq-${index}`}\n                >\n                  <h3 className=\"font-bold mb-2 text-primary\">{faq.question}</h3>\n                  <p className=\"text-gray-300\">{faq.answer}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5505},"client/src/pages/store.tsx":{"content":"import { ShoppingCart, Package, Wrench, Shirt, HardHat } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Store() {\n  const merchItems = [\n    {\n      id: 1,\n      name: \"RooFix AI T-Shirt\",\n      description: \"Premium quality tee with RooFix AI logo\",\n      price: \"$29.99\",\n      category: \"merch\",\n      icon: Shirt,\n    },\n    {\n      id: 2,\n      name: \"RooFix AI Hard Hat\",\n      description: \"Professional grade safety helmet with logo\",\n      price: \"$49.99\",\n      category: \"merch\",\n      icon: HardHat,\n    },\n    {\n      id: 3,\n      name: \"RooFix Branded Gear Pack\",\n      description: \"Complete set of RooFix branded apparel\",\n      price: \"$149.99\",\n      category: \"merch\",\n      icon: Package,\n    },\n  ];\n\n  const toolItems = [\n    {\n      id: 4,\n      name: \"Professional Roofing Toolkit\",\n      description: \"Complete set of essential roofing tools\",\n      price: \"$299.99\",\n      category: \"tools\",\n      icon: Wrench,\n    },\n    {\n      id: 5,\n      name: \"Advanced Inspection Kit\",\n      description: \"High-tech tools for thorough roof inspections\",\n      price: \"$499.99\",\n      category: \"tools\",\n      icon: Package,\n    },\n    {\n      id: 6,\n      name: \"Commercial Roofing Toolset\",\n      description: \"Professional-grade tools for large projects\",\n      price: \"$899.99\",\n      category: \"tools\",\n      icon: Wrench,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl md:text-6xl font-black mb-6 text-white\">\n            RooFix <span className=\"gradient-text neon-glow\">Store</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Premium RooFix branded merchandise and professional roofing tools\n          </p>\n        </div>\n\n        {/* RooFix Merch Section */}\n        <section className=\"mb-20\">\n          <div className=\"flex items-center mb-8\">\n            <Shirt className=\"h-8 w-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-white\">RooFix Branded Merchandise</h2>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {merchItems.map((item) => (\n              <Card \n                key={item.id} \n                className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                data-testid={`card-merch-${item.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex justify-center mb-4\">\n                    <div className=\"p-4 rounded-full bg-primary/10 border-2 border-primary\">\n                      <item.icon className=\"h-12 w-12 text-primary\" />\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-white text-center\">{item.name}</CardTitle>\n                  <CardDescription className=\"text-gray-400 text-center\">\n                    {item.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-primary text-center\">{item.price}</p>\n                </CardContent>\n                <CardFooter>\n                  <Button \n                    className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold glow-effect\"\n                    data-testid={`button-buy-${item.id}`}\n                  >\n                    <ShoppingCart className=\"mr-2 h-5 w-5\" />\n                    Add to Cart\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Roofing Tools Section */}\n        <section>\n          <div className=\"flex items-center mb-8\">\n            <Wrench className=\"h-8 w-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-white\">Professional Roofing Tools</h2>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {toolItems.map((item) => (\n              <Card \n                key={item.id} \n                className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                data-testid={`card-tool-${item.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex justify-center mb-4\">\n                    <div className=\"p-4 rounded-full bg-primary/10 border-2 border-primary\">\n                      <item.icon className=\"h-12 w-12 text-primary\" />\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-white text-center\">{item.name}</CardTitle>\n                  <CardDescription className=\"text-gray-400 text-center\">\n                    {item.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-primary text-center\">{item.price}</p>\n                </CardContent>\n                <CardFooter>\n                  <Button \n                    className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold glow-effect\"\n                    data-testid={`button-buy-${item.id}`}\n                  >\n                    <ShoppingCart className=\"mr-2 h-5 w-5\" />\n                    Add to Cart\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5743},"client/src/pages/tools.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Calculator, \n  Wind, \n  Ruler, \n  Thermometer, \n  DollarSign, \n  TrendingUp,\n  AlertTriangle,\n  FileText\n} from \"lucide-react\";\n\ntype Tool = {\n  id: string;\n  title: string;\n  description: string;\n  icon: any;\n  badge: string;\n  badgeColor: string;\n};\n\nconst tools: Tool[] = [\n  {\n    id: \"roi\",\n    title: \"Roofing Project ROI Calculator\",\n    description: \"Calculate return on investment for roofing projects\",\n    icon: TrendingUp,\n    badge: \"ROI\",\n    badgeColor: \"bg-green-500/20 text-green-400 border-green-500/30\"\n  },\n  {\n    id: \"wind-uplift\",\n    title: \"Wind Uplift Pressure Calculator\",\n    description: \"Calculate wind uplift forces for proper fastener selection\",\n    icon: Wind,\n    badge: \"Safety\",\n    badgeColor: \"bg-red-500/20 text-red-400 border-red-500/30\"\n  },\n  {\n    id: \"square-footage\",\n    title: \"Roof Area Calculator\",\n    description: \"Calculate roof square footage and material quantities\",\n    icon: Ruler,\n    badge: \"Measurement\",\n    badgeColor: \"bg-blue-500/20 text-blue-400 border-blue-500/30\"\n  },\n  {\n    id: \"insulation\",\n    title: \"Insulation R-Value Calculator\",\n    description: \"Determine required insulation for energy efficiency\",\n    icon: Thermometer,\n    badge: \"Energy\",\n    badgeColor: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\"\n  },\n  {\n    id: \"project-estimator\",\n    title: \"Quick Project Cost Estimator\",\n    description: \"Estimate commercial roofing project costs\",\n    icon: DollarSign,\n    badge: \"Estimating\",\n    badgeColor: \"bg-purple-500/20 text-purple-400 border-purple-500/30\"\n  },\n  {\n    id: \"slope\",\n    title: \"Roof Slope/Pitch Calculator\",\n    description: \"Convert between slope formats and calculate drainage\",\n    icon: Calculator,\n    badge: \"Conversion\",\n    badgeColor: \"bg-cyan-500/20 text-cyan-400 border-cyan-500/30\"\n  }\n];\n\nexport default function Tools() {\n  const [activeTool, setActiveTool] = useState<string | null>(null);\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-5xl md:text-6xl font-black mb-6 text-white\">\n            Contractor <span className=\"gradient-text neon-glow\">Tools</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Professional Roofing Calculators - Streamline your roofing projects with AI-powered tools\n          </p>\n        </div>\n\n        {/* Tools Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {tools.map((tool) => {\n            const Icon = tool.icon;\n            return (\n              <Card \n                key={tool.id} \n                className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                data-testid={`card-tool-${tool.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"p-3 bg-primary/10 rounded-lg\">\n                      <Icon className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${tool.badgeColor}`}>\n                      {tool.badge}\n                    </span>\n                  </div>\n                  <CardTitle className=\"text-white text-xl\">{tool.title}</CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    {tool.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Button \n                    onClick={() => setActiveTool(tool.id)}\n                    className=\"w-full bg-primary hover:bg-primary/80 text-black font-bold\"\n                    data-testid={`button-launch-${tool.id}`}\n                  >\n                    Launch Tool\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Disclaimer */}\n        <div className=\"mt-12 p-6 bg-yellow-500/10 border border-yellow-500/30 rounded-lg\">\n          <div className=\"flex gap-3\">\n            <AlertTriangle className=\"h-5 w-5 text-yellow-400 flex-shrink-0 mt-0.5\" />\n            <div>\n              <p className=\"text-yellow-400 font-semibold mb-1\">Professional Disclaimer</p>\n              <p className=\"text-gray-300 text-sm\">\n                These calculators provide estimates based on standard industry formulas. Always consult with licensed engineering professionals for final specifications and comply with local building codes.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tool Modals */}\n      <ROICalculator open={activeTool === \"roi\"} onClose={() => setActiveTool(null)} />\n      <WindUpliftCalculator open={activeTool === \"wind-uplift\"} onClose={() => setActiveTool(null)} />\n      <SquareFootageCalculator open={activeTool === \"square-footage\"} onClose={() => setActiveTool(null)} />\n      <InsulationCalculator open={activeTool === \"insulation\"} onClose={() => setActiveTool(null)} />\n      <ProjectEstimator open={activeTool === \"project-estimator\"} onClose={() => setActiveTool(null)} />\n      <SlopeCalculator open={activeTool === \"slope\"} onClose={() => setActiveTool(null)} />\n    </div>\n  );\n}\n\n// ROI Calculator Component\nfunction ROICalculator({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const [inputs, setInputs] = useState({\n    projectCost: \"\",\n    currentEnergyCost: \"\",\n    energySavings: \"\",\n    roofLifespan: \"20\",\n    maintenanceSavings: \"\"\n  });\n\n  const calculate = () => {\n    const cost = parseFloat(inputs.projectCost);\n    const monthlyEnergy = parseFloat(inputs.currentEnergyCost);\n    const savingsPercent = parseFloat(inputs.energySavings) / 100;\n    const lifespan = parseFloat(inputs.roofLifespan);\n    const maintenanceSavings = parseFloat(inputs.maintenanceSavings);\n\n    const annualEnergySavings = monthlyEnergy * 12 * savingsPercent;\n    const totalSavings = (annualEnergySavings * lifespan) + (maintenanceSavings * lifespan);\n    const paybackPeriod = cost / (annualEnergySavings + maintenanceSavings);\n    const annualROI = ((totalSavings - cost) / cost / lifespan) * 100;\n\n    return {\n      totalSavings: totalSavings.toFixed(2),\n      paybackPeriod: paybackPeriod.toFixed(1),\n      annualROI: annualROI.toFixed(2),\n      breakEven: paybackPeriod.toFixed(1)\n    };\n  };\n\n  const results = inputs.projectCost && inputs.currentEnergyCost && inputs.energySavings && inputs.maintenanceSavings \n    ? calculate() \n    : null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-black/95 border-primary/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-white flex items-center gap-2\">\n            <TrendingUp className=\"h-6 w-6 text-primary\" />\n            Roofing Project ROI Calculator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Calculate return on investment for roofing projects\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"roi-cost\" className=\"text-gray-300\">Project Cost ($)</Label>\n              <Input\n                id=\"roi-cost\"\n                type=\"number\"\n                value={inputs.projectCost}\n                onChange={(e) => setInputs({ ...inputs, projectCost: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"50000\"\n                data-testid=\"input-roi-cost\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"roi-energy\" className=\"text-gray-300\">Current Energy Cost ($/month)</Label>\n              <Input\n                id=\"roi-energy\"\n                type=\"number\"\n                value={inputs.currentEnergyCost}\n                onChange={(e) => setInputs({ ...inputs, currentEnergyCost: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"500\"\n                data-testid=\"input-roi-energy\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"roi-savings\" className=\"text-gray-300\">Expected Energy Savings (%)</Label>\n              <Input\n                id=\"roi-savings\"\n                type=\"number\"\n                value={inputs.energySavings}\n                onChange={(e) => setInputs({ ...inputs, energySavings: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"25\"\n                data-testid=\"input-roi-savings\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"roi-lifespan\" className=\"text-gray-300\">Roof Lifespan (years)</Label>\n              <Input\n                id=\"roi-lifespan\"\n                type=\"number\"\n                value={inputs.roofLifespan}\n                onChange={(e) => setInputs({ ...inputs, roofLifespan: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                data-testid=\"input-roi-lifespan\"\n              />\n            </div>\n            <div className=\"space-y-2 col-span-2\">\n              <Label htmlFor=\"roi-maintenance\" className=\"text-gray-300\">Maintenance Cost Savings ($/year)</Label>\n              <Input\n                id=\"roi-maintenance\"\n                type=\"number\"\n                value={inputs.maintenanceSavings}\n                onChange={(e) => setInputs({ ...inputs, maintenanceSavings: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"1000\"\n                data-testid=\"input-roi-maintenance\"\n              />\n            </div>\n          </div>\n\n          {results && (\n            <div className=\"p-6 bg-primary/10 border border-primary rounded-lg space-y-3\" data-testid=\"result-roi\">\n              <h3 className=\"text-primary font-bold text-lg mb-4\">Calculation Results</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Total Savings Over Lifespan</p>\n                  <p className=\"text-white font-bold text-xl\">${results.totalSavings}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Payback Period</p>\n                  <p className=\"text-white font-bold text-xl\">{results.paybackPeriod} years</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Annual ROI</p>\n                  <p className=\"text-primary font-bold text-xl\">{results.annualROI}%</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Break-even Point</p>\n                  <p className=\"text-white font-bold text-xl\">{results.breakEven} years</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-primary/30 text-primary hover:bg-primary/10\"\n              data-testid=\"button-close-roi\"\n            >\n              Close\n            </Button>\n            <Button \n              onClick={() => setInputs({ projectCost: \"\", currentEnergyCost: \"\", energySavings: \"\", roofLifespan: \"20\", maintenanceSavings: \"\" })}\n              className=\"flex-1 bg-primary/20 text-primary hover:bg-primary/30\"\n              data-testid=\"button-clear-roi\"\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Wind Uplift Calculator Component\nfunction WindUpliftCalculator({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const [inputs, setInputs] = useState({\n    buildingHeight: \"\",\n    windSpeed: \"110\",\n    roofZone: \"Field\",\n    exposure: \"C\",\n    roofSlope: \"2\"\n  });\n\n  const calculate = () => {\n    const height = parseFloat(inputs.buildingHeight);\n    const V = parseFloat(inputs.windSpeed);\n    const slope = parseFloat(inputs.roofSlope);\n\n    // Calculate Kz based on height and exposure (ASCE 7)\n    let Kz = 0.85; // default for Exposure C at 30 ft\n    \n    if (inputs.exposure === \"B\") {\n      // Suburban/wooded exposure\n      Kz = height <= 30 ? 0.57 : 0.62 * Math.pow(height / 30, 2/7);\n    } else if (inputs.exposure === \"C\") {\n      // Open terrain exposure\n      if (height <= 15) Kz = 0.85;\n      else if (height <= 20) Kz = 0.90;\n      else if (height <= 30) Kz = 0.98;\n      else if (height <= 40) Kz = 1.04;\n      else if (height <= 50) Kz = 1.09;\n      else Kz = 1.09 * Math.pow(height / 50, 2/9.5);\n    } else if (inputs.exposure === \"D\") {\n      // Coastal/flat exposure\n      if (height <= 15) Kz = 1.03;\n      else if (height <= 20) Kz = 1.08;\n      else if (height <= 30) Kz = 1.16;\n      else if (height <= 40) Kz = 1.22;\n      else if (height <= 50) Kz = 1.27;\n      else Kz = 1.27 * Math.pow(height / 50, 2/11.5);\n    }\n\n    // Topographic factor (Kzt) - simplified to 1.0 for flat terrain\n    const Kzt = 1.0;\n    \n    // Wind directionality factor (Kd) - 0.85 for buildings\n    const Kd = 0.85;\n    \n    // Zone factors (GCp) - pressure coefficients\n    let zoneFactors = { Corner: -2.8, Edge: -1.8, Field: -1.0 };\n    \n    // Slope adjustment for GCp (ASCE 7-16 Fig 27.3-1)\n    // For slopes > 10°, reduce negative pressure (less uplift)\n    if (slope > 10) {\n      const slopeReduction = 1.0 - (Math.min(slope - 10, 15) / 15) * 0.3; // Up to 30% reduction\n      zoneFactors = {\n        Corner: zoneFactors.Corner * slopeReduction,\n        Edge: zoneFactors.Edge * slopeReduction,\n        Field: zoneFactors.Field * slopeReduction\n      };\n    }\n    \n    const GCp = zoneFactors[inputs.roofZone as keyof typeof zoneFactors] || -1.0;\n\n    // Calculate velocity pressure (qh)\n    const qh = 0.00256 * Kz * Kzt * Kd * V * V;\n\n    // Design pressure (using absolute value for uplift)\n    const designPressure = Math.abs(qh * GCp);\n\n    // Fastener spacing based on pressure\n    const fastenerSpacing = designPressure > 40 ? \"6 inches\" : \n                           designPressure > 25 ? \"12 inches\" : \n                           designPressure > 15 ? \"18 inches\" : \"24 inches\";\n    \n    // Attachment pattern\n    const pattern = inputs.roofZone === \"Corner\" ? \"Enhanced corner fastening (2 rows)\" : \n                   inputs.roofZone === \"Edge\" ? \"Perimeter reinforcement (1.5x density)\" : \n                   \"Standard field pattern\";\n\n    return {\n      designPressure: designPressure.toFixed(2),\n      fastenerSpacing,\n      pattern,\n      safetyFactor: \"1.5 (ASCE 7)\"\n    };\n  };\n\n  const results = inputs.buildingHeight && inputs.windSpeed ? calculate() : null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-black/95 border-primary/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-white flex items-center gap-2\">\n            <Wind className=\"h-6 w-6 text-primary\" />\n            Wind Uplift Pressure Calculator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Calculate wind uplift forces for proper fastener selection (ASCE 7)\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"wind-height\" className=\"text-gray-300\">Building Height (feet)</Label>\n              <Input\n                id=\"wind-height\"\n                type=\"number\"\n                value={inputs.buildingHeight}\n                onChange={(e) => setInputs({ ...inputs, buildingHeight: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"30\"\n                data-testid=\"input-wind-height\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"wind-speed\" className=\"text-gray-300\">Wind Speed (mph)</Label>\n              <Select \n                value={inputs.windSpeed} \n                onValueChange={(value) => setInputs({ ...inputs, windSpeed: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-wind-speed\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"90\">90 mph</SelectItem>\n                  <SelectItem value=\"110\">110 mph</SelectItem>\n                  <SelectItem value=\"130\">130 mph</SelectItem>\n                  <SelectItem value=\"150\">150 mph</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"wind-zone\" className=\"text-gray-300\">Roof Zone</Label>\n              <Select \n                value={inputs.roofZone} \n                onValueChange={(value) => setInputs({ ...inputs, roofZone: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-wind-zone\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Corner\">Corner</SelectItem>\n                  <SelectItem value=\"Edge\">Edge</SelectItem>\n                  <SelectItem value=\"Field\">Field</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"wind-exposure\" className=\"text-gray-300\">Building Exposure</Label>\n              <Select \n                value={inputs.exposure} \n                onValueChange={(value) => setInputs({ ...inputs, exposure: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-wind-exposure\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"B\">Exposure B (Urban)</SelectItem>\n                  <SelectItem value=\"C\">Exposure C (Open)</SelectItem>\n                  <SelectItem value=\"D\">Exposure D (Coastal)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2 col-span-2\">\n              <Label htmlFor=\"wind-slope\" className=\"text-gray-300\">Roof Slope (degrees)</Label>\n              <Input\n                id=\"wind-slope\"\n                type=\"number\"\n                value={inputs.roofSlope}\n                onChange={(e) => setInputs({ ...inputs, roofSlope: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                data-testid=\"input-wind-slope\"\n              />\n            </div>\n          </div>\n\n          {results && (\n            <div className=\"p-6 bg-primary/10 border border-primary rounded-lg space-y-3\" data-testid=\"result-wind\">\n              <h3 className=\"text-primary font-bold text-lg mb-4\">Calculation Results</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center pb-2 border-b border-primary/20\">\n                  <span className=\"text-gray-400\">Design Wind Pressure</span>\n                  <span className=\"text-white font-bold text-lg\">{results.designPressure} psf</span>\n                </div>\n                <div className=\"flex justify-between items-center pb-2 border-b border-primary/20\">\n                  <span className=\"text-gray-400\">Required Fastener Spacing</span>\n                  <span className=\"text-primary font-bold\">{results.fastenerSpacing}</span>\n                </div>\n                <div className=\"flex justify-between items-center pb-2 border-b border-primary/20\">\n                  <span className=\"text-gray-400\">Recommended Pattern</span>\n                  <span className=\"text-white font-bold\">{results.pattern}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-400\">Safety Factor</span>\n                  <span className=\"text-white font-bold\">{results.safetyFactor}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-primary/30 text-primary hover:bg-primary/10\"\n              data-testid=\"button-close-wind\"\n            >\n              Close\n            </Button>\n            <Button \n              onClick={() => setInputs({ buildingHeight: \"\", windSpeed: \"110\", roofZone: \"Field\", exposure: \"C\", roofSlope: \"2\" })}\n              className=\"flex-1 bg-primary/20 text-primary hover:bg-primary/30\"\n              data-testid=\"button-clear-wind\"\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Square Footage Calculator Component\nfunction SquareFootageCalculator({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const [inputs, setInputs] = useState({\n    roofType: \"Flat\",\n    roofLength: \"\",\n    roofWidth: \"\",\n    pitch: \"4\",\n    wasteFactor: \"10\"\n  });\n\n  const calculate = () => {\n    const length = parseFloat(inputs.roofLength);\n    const width = parseFloat(inputs.roofWidth);\n    const waste = 1 + parseFloat(inputs.wasteFactor) / 100;\n\n    let baseArea = length * width;\n\n    // Adjust for roof type\n    if (inputs.roofType === \"Gable\" || inputs.roofType === \"Hip\") {\n      const pitch = parseFloat(inputs.pitch);\n      const pitchMultiplier = Math.sqrt(1 + Math.pow(pitch / 12, 2));\n      baseArea = baseArea * pitchMultiplier;\n    }\n\n    const totalArea = baseArea * waste;\n    const squares = baseArea / 100;\n    const rollSize = 100; // Standard roll coverage\n    const rolls = Math.ceil(totalArea / rollSize);\n\n    return {\n      baseArea: baseArea.toFixed(2),\n      totalArea: totalArea.toFixed(2),\n      squares: squares.toFixed(2),\n      rolls\n    };\n  };\n\n  const results = inputs.roofLength && inputs.roofWidth ? calculate() : null;\n\n  const clearForm = () => {\n    setInputs({\n      roofType: \"Flat\",\n      roofLength: \"\",\n      roofWidth: \"\",\n      pitch: \"4\",\n      wasteFactor: \"10\"\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-black/95 border-primary/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-white flex items-center gap-2\">\n            <Ruler className=\"h-6 w-6 text-primary\" />\n            Roof Area Calculator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Calculate roof square footage and material quantities\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2 col-span-2\">\n              <Label htmlFor=\"sqft-type\" className=\"text-gray-300\">Roof Type</Label>\n              <Select \n                value={inputs.roofType} \n                onValueChange={(value) => setInputs({ ...inputs, roofType: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-roof-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Flat\">Flat</SelectItem>\n                  <SelectItem value=\"Gable\">Gable</SelectItem>\n                  <SelectItem value=\"Hip\">Hip</SelectItem>\n                  <SelectItem value=\"Complex\">Complex</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"sqft-length\" className=\"text-gray-300\">Length (feet)</Label>\n              <Input\n                id=\"sqft-length\"\n                type=\"number\"\n                value={inputs.roofLength}\n                onChange={(e) => setInputs({ ...inputs, roofLength: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"100\"\n                data-testid=\"input-sqft-length\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"sqft-width\" className=\"text-gray-300\">Width (feet)</Label>\n              <Input\n                id=\"sqft-width\"\n                type=\"number\"\n                value={inputs.roofWidth}\n                onChange={(e) => setInputs({ ...inputs, roofWidth: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"80\"\n                data-testid=\"input-sqft-width\"\n              />\n            </div>\n            {(inputs.roofType === \"Gable\" || inputs.roofType === \"Hip\") && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sqft-pitch\" className=\"text-gray-300\">Roof Pitch (rise per 12&quot;)</Label>\n                <Input\n                  id=\"sqft-pitch\"\n                  type=\"number\"\n                  value={inputs.pitch}\n                  onChange={(e) => setInputs({ ...inputs, pitch: e.target.value })}\n                  className=\"bg-black/50 border-primary/30 text-white\"\n                  data-testid=\"input-sqft-pitch\"\n                />\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"sqft-waste\" className=\"text-gray-300\">Waste Factor (%)</Label>\n              <Input\n                id=\"sqft-waste\"\n                type=\"number\"\n                value={inputs.wasteFactor}\n                onChange={(e) => setInputs({ ...inputs, wasteFactor: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                data-testid=\"input-sqft-waste\"\n              />\n            </div>\n          </div>\n\n          {results && (\n            <div className=\"p-6 bg-primary/10 border border-primary rounded-lg space-y-3\" data-testid=\"result-sqft\">\n              <h3 className=\"text-primary font-bold text-lg mb-4\">Calculation Results</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Total Roof Area</p>\n                  <p className=\"text-white font-bold text-xl\">{results.baseArea} sq ft</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Roofing Squares</p>\n                  <p className=\"text-white font-bold text-xl\">{results.squares}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Material with Waste</p>\n                  <p className=\"text-primary font-bold text-xl\">{results.totalArea} sq ft</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Membrane Rolls</p>\n                  <p className=\"text-white font-bold text-xl\">{results.rolls}</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-primary/30 text-primary hover:bg-primary/10\"\n              data-testid=\"button-close-sqft\"\n            >\n              Close\n            </Button>\n            <Button \n              onClick={clearForm}\n              className=\"flex-1 bg-primary/20 text-primary hover:bg-primary/30\"\n              data-testid=\"button-clear-sqft\"\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Insulation Calculator Component\nfunction InsulationCalculator({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const [inputs, setInputs] = useState({\n    climateZone: \"4\",\n    buildingType: \"Commercial\",\n    currentRValue: \"\",\n    targetSavings: \"20\"\n  });\n\n  const calculate = () => {\n    const zone = parseInt(inputs.climateZone);\n    const currentR = parseFloat(inputs.currentRValue) || 0;\n    const savingsPercent = parseFloat(inputs.targetSavings);\n\n    // Recommended R-values by climate zone\n    const recommendedR = zone <= 2 ? 20 : zone <= 4 ? 30 : zone <= 6 ? 40 : 50;\n    \n    // Calculate needed R-value increase\n    const neededR = Math.max(recommendedR - currentR, 0);\n    \n    // Thickness estimates (inches per R-value for common materials)\n    const polyisoThickness = (neededR / 6).toFixed(1); // R-6 per inch\n    const xpsThickness = (neededR / 5).toFixed(1); // R-5 per inch\n    const epsThickness = (neededR / 4).toFixed(1); // R-4 per inch\n\n    // Energy savings estimate (simplified)\n    const annualSavings = (savingsPercent / 100) * 2000; // Base $2000/year\n\n    return {\n      recommendedR: recommendedR.toString(),\n      neededR: neededR.toFixed(1),\n      annualSavings: annualSavings.toFixed(0),\n      polyisoThickness,\n      xpsThickness,\n      epsThickness\n    };\n  };\n\n  const results = inputs.climateZone ? calculate() : null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-black/95 border-primary/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-white flex items-center gap-2\">\n            <Thermometer className=\"h-6 w-6 text-primary\" />\n            Insulation R-Value Calculator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Determine required insulation for energy efficiency\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"insul-zone\" className=\"text-gray-300\">Climate Zone</Label>\n              <Select \n                value={inputs.climateZone} \n                onValueChange={(value) => setInputs({ ...inputs, climateZone: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-climate-zone\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">Zone 1 (Very Hot)</SelectItem>\n                  <SelectItem value=\"2\">Zone 2 (Hot)</SelectItem>\n                  <SelectItem value=\"3\">Zone 3 (Warm)</SelectItem>\n                  <SelectItem value=\"4\">Zone 4 (Mixed)</SelectItem>\n                  <SelectItem value=\"5\">Zone 5 (Cool)</SelectItem>\n                  <SelectItem value=\"6\">Zone 6 (Cold)</SelectItem>\n                  <SelectItem value=\"7\">Zone 7 (Very Cold)</SelectItem>\n                  <SelectItem value=\"8\">Zone 8 (Subarctic)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"insul-type\" className=\"text-gray-300\">Building Type</Label>\n              <Select \n                value={inputs.buildingType} \n                onValueChange={(value) => setInputs({ ...inputs, buildingType: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-building-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Commercial\">Commercial</SelectItem>\n                  <SelectItem value=\"Industrial\">Industrial</SelectItem>\n                  <SelectItem value=\"Institutional\">Institutional</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"insul-current\" className=\"text-gray-300\">Current R-Value (if retrofit)</Label>\n              <Input\n                id=\"insul-current\"\n                type=\"number\"\n                value={inputs.currentRValue}\n                onChange={(e) => setInputs({ ...inputs, currentRValue: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"0\"\n                data-testid=\"input-current-rvalue\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"insul-savings\" className=\"text-gray-300\">Target Energy Savings (%)</Label>\n              <Input\n                id=\"insul-savings\"\n                type=\"number\"\n                value={inputs.targetSavings}\n                onChange={(e) => setInputs({ ...inputs, targetSavings: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                data-testid=\"input-target-savings\"\n              />\n            </div>\n          </div>\n\n          {results && (\n            <div className=\"space-y-4\">\n              <div className=\"p-6 bg-primary/10 border border-primary rounded-lg space-y-3\" data-testid=\"result-insulation\">\n                <h3 className=\"text-primary font-bold text-lg mb-4\">Calculation Results</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Recommended R-Value</p>\n                    <p className=\"text-white font-bold text-xl\">R-{results.recommendedR}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Additional R-Value Needed</p>\n                    <p className=\"text-primary font-bold text-xl\">R-{results.neededR}</p>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <p className=\"text-gray-400 text-sm\">Annual Energy Savings Estimate</p>\n                    <p className=\"text-white font-bold text-xl\">${results.annualSavings}/year</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-6 bg-black/50 border border-primary/20 rounded-lg\">\n                <h4 className=\"text-white font-semibold mb-3\">Insulation Thickness Recommendations</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Polyiso (R-6/inch):</span>\n                    <span className=\"text-primary font-bold\">{results.polyisoThickness}&quot; thick</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">XPS (R-5/inch):</span>\n                    <span className=\"text-primary font-bold\">{results.xpsThickness}&quot; thick</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">EPS (R-4/inch):</span>\n                    <span className=\"text-primary font-bold\">{results.epsThickness}&quot; thick</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-primary/30 text-primary hover:bg-primary/10\"\n              data-testid=\"button-close-insulation\"\n            >\n              Close\n            </Button>\n            <Button \n              onClick={() => setInputs({ climateZone: \"4\", buildingType: \"Commercial\", currentRValue: \"\", targetSavings: \"20\" })}\n              className=\"flex-1 bg-primary/20 text-primary hover:bg-primary/30\"\n              data-testid=\"button-clear-insulation\"\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Project Estimator Component\nfunction ProjectEstimator({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const [inputs, setInputs] = useState({\n    roofArea: \"\",\n    systemType: \"TPO\",\n    installMethod: \"Fully Adhered\",\n    insulation: \"Yes\",\n    tearoff: \"Yes\",\n    region: \"Midwest\"\n  });\n\n  const calculate = () => {\n    const area = parseFloat(inputs.roofArea);\n    \n    // Base costs per sq ft\n    const materialCosts: any = {\n      TPO: 3.5,\n      PVC: 4.0,\n      EPDM: 3.0,\n      \"Modified Bitumen\": 3.25,\n      \"Built-Up\": 3.75\n    };\n\n    const laborCosts: any = {\n      \"Fully Adhered\": 2.5,\n      \"Mechanically Attached\": 2.0,\n      \"Ballasted\": 1.75\n    };\n\n    const regionMultipliers: any = {\n      Northeast: 1.2,\n      Southeast: 1.0,\n      Midwest: 1.05,\n      West: 1.15,\n      Southwest: 1.0\n    };\n\n    let materialCost = area * (materialCosts[inputs.systemType] || 3.5);\n    let laborCost = area * (laborCosts[inputs.installMethod] || 2.0);\n\n    if (inputs.insulation === \"Yes\") {\n      materialCost += area * 2.0;\n      laborCost += area * 0.5;\n    }\n\n    if (inputs.tearoff === \"Yes\") {\n      laborCost += area * 1.5;\n    }\n\n    const regionMultiplier = regionMultipliers[inputs.region] || 1.0;\n    materialCost *= regionMultiplier;\n    laborCost *= regionMultiplier;\n\n    const totalLow = (materialCost + laborCost) * 0.9;\n    const totalMid = materialCost + laborCost;\n    const totalHigh = (materialCost + laborCost) * 1.2;\n\n    const costPerSquare = (totalMid / area) * 100;\n    const estimatedDays = Math.ceil(area / 2000);\n\n    return {\n      materialCost: materialCost.toFixed(0),\n      laborCost: laborCost.toFixed(0),\n      totalLow: totalLow.toFixed(0),\n      totalMid: totalMid.toFixed(0),\n      totalHigh: totalHigh.toFixed(0),\n      costPerSquare: costPerSquare.toFixed(2),\n      estimatedDays\n    };\n  };\n\n  const results = inputs.roofArea ? calculate() : null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-black/95 border-primary/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-white flex items-center gap-2\">\n            <DollarSign className=\"h-6 w-6 text-primary\" />\n            Quick Project Cost Estimator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Estimate commercial roofing project costs\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2 col-span-2\">\n              <Label htmlFor=\"proj-area\" className=\"text-gray-300\">Roof Area (sq ft)</Label>\n              <Input\n                id=\"proj-area\"\n                type=\"number\"\n                value={inputs.roofArea}\n                onChange={(e) => setInputs({ ...inputs, roofArea: e.target.value })}\n                className=\"bg-black/50 border-primary/30 text-white\"\n                placeholder=\"10000\"\n                data-testid=\"input-proj-area\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"proj-system\" className=\"text-gray-300\">System Type</Label>\n              <Select \n                value={inputs.systemType} \n                onValueChange={(value) => setInputs({ ...inputs, systemType: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-system-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"TPO\">TPO</SelectItem>\n                  <SelectItem value=\"PVC\">PVC</SelectItem>\n                  <SelectItem value=\"EPDM\">EPDM</SelectItem>\n                  <SelectItem value=\"Modified Bitumen\">Modified Bitumen</SelectItem>\n                  <SelectItem value=\"Built-Up\">Built-Up</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"proj-install\" className=\"text-gray-300\">Installation Method</Label>\n              <Select \n                value={inputs.installMethod} \n                onValueChange={(value) => setInputs({ ...inputs, installMethod: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-install-method\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Fully Adhered\">Fully Adhered</SelectItem>\n                  <SelectItem value=\"Mechanically Attached\">Mechanically Attached</SelectItem>\n                  <SelectItem value=\"Ballasted\">Ballasted</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"proj-insul\" className=\"text-gray-300\">Insulation Required</Label>\n              <Select \n                value={inputs.insulation} \n                onValueChange={(value) => setInputs({ ...inputs, insulation: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-insulation\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Yes\">Yes</SelectItem>\n                  <SelectItem value=\"No\">No</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"proj-tearoff\" className=\"text-gray-300\">Tear-off Needed</Label>\n              <Select \n                value={inputs.tearoff} \n                onValueChange={(value) => setInputs({ ...inputs, tearoff: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-tearoff\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Yes\">Yes</SelectItem>\n                  <SelectItem value=\"No\">No</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2 col-span-2\">\n              <Label htmlFor=\"proj-region\" className=\"text-gray-300\">Region</Label>\n              <Select \n                value={inputs.region} \n                onValueChange={(value) => setInputs({ ...inputs, region: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-region\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Northeast\">Northeast</SelectItem>\n                  <SelectItem value=\"Southeast\">Southeast</SelectItem>\n                  <SelectItem value=\"Midwest\">Midwest</SelectItem>\n                  <SelectItem value=\"West\">West</SelectItem>\n                  <SelectItem value=\"Southwest\">Southwest</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {results && (\n            <div className=\"space-y-4\">\n              <div className=\"p-6 bg-primary/10 border border-primary rounded-lg space-y-3\" data-testid=\"result-project\">\n                <h3 className=\"text-primary font-bold text-lg mb-4\">Cost Estimate</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Material Cost</p>\n                    <p className=\"text-white font-bold text-lg\">${results.materialCost}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Labor Cost</p>\n                    <p className=\"text-white font-bold text-lg\">${results.laborCost}</p>\n                  </div>\n                </div>\n                <div className=\"pt-3 border-t border-primary/30\">\n                  <p className=\"text-gray-400 text-sm mb-2\">Total Project Cost Range</p>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-white\">Low: <span className=\"font-bold\">${results.totalLow}</span></span>\n                    <span className=\"text-primary font-bold text-xl\">${results.totalMid}</span>\n                    <span className=\"text-white\">High: <span className=\"font-bold\">${results.totalHigh}</span></span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 pt-3 border-t border-primary/30\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Cost per Square</p>\n                    <p className=\"text-white font-bold\">${results.costPerSquare}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Estimated Timeline</p>\n                    <p className=\"text-white font-bold\">{results.estimatedDays} days</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-primary/30 text-primary hover:bg-primary/10\"\n              data-testid=\"button-close-project\"\n            >\n              Close\n            </Button>\n            <Button \n              onClick={() => setInputs({ roofArea: \"\", systemType: \"TPO\", installMethod: \"Fully Adhered\", insulation: \"Yes\", tearoff: \"Yes\", region: \"Midwest\" })}\n              className=\"flex-1 bg-primary/20 text-primary hover:bg-primary/30\"\n              data-testid=\"button-clear-project\"\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Slope Calculator Component\nfunction SlopeCalculator({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const [inputs, setInputs] = useState({\n    inputFormat: \"Rise/Run\",\n    rise: \"4\",\n    run: \"12\",\n    value: \"\"\n  });\n\n  const calculate = () => {\n    let rise = 0, run = 12;\n\n    if (inputs.inputFormat === \"Rise/Run\") {\n      rise = parseFloat(inputs.rise);\n      run = parseFloat(inputs.run);\n    } else if (inputs.inputFormat === \"Degrees\") {\n      const degrees = parseFloat(inputs.value);\n      rise = Math.tan(degrees * Math.PI / 180) * 12;\n      run = 12;\n    } else if (inputs.inputFormat === \"Percentage\") {\n      const percent = parseFloat(inputs.value) / 100;\n      rise = percent * 12;\n      run = 12;\n    } else if (inputs.inputFormat === \"Inches per Foot\") {\n      rise = parseFloat(inputs.value);\n      run = 12;\n    }\n\n    const slopeDegrees = Math.atan(rise / run) * (180 / Math.PI);\n    const slopePercent = (rise / run) * 100;\n    const pitch = `${rise.toFixed(1)}:${run}`;\n\n    // Drainage recommendations\n    const minSlope = rise / run >= 0.25 / 12 ? \"Adequate\" : \"Insufficient\";\n    const recommendation = rise / run < 0.25 / 12 ? \"Minimum 1/4\\\" per foot required\" :\n                          rise / run < 2 / 12 ? \"Suitable for most single-ply membranes\" :\n                          rise / run < 4 / 12 ? \"Ideal for drainage\" :\n                          \"Consider steep slope specifications\";\n\n    return {\n      degrees: slopeDegrees.toFixed(2),\n      percent: slopePercent.toFixed(2),\n      pitch,\n      riseRun: `${rise.toFixed(2)}:${run}`,\n      inchesPerFoot: (rise / run * 12).toFixed(2),\n      minSlope,\n      recommendation\n    };\n  };\n\n  const results = (inputs.inputFormat === \"Rise/Run\" && inputs.rise && inputs.run) || \n                  (inputs.inputFormat !== \"Rise/Run\" && inputs.value) \n    ? calculate() \n    : null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl bg-black/95 border-primary/30 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-white flex items-center gap-2\">\n            <Calculator className=\"h-6 w-6 text-primary\" />\n            Roof Slope/Pitch Calculator\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Convert between slope formats and calculate drainage\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"slope-format\" className=\"text-gray-300\">Input Format</Label>\n              <Select \n                value={inputs.inputFormat} \n                onValueChange={(value) => setInputs({ ...inputs, inputFormat: value })}\n              >\n                <SelectTrigger className=\"bg-black/50 border-primary/30 text-white\" data-testid=\"select-slope-format\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Rise/Run\">Rise/Run</SelectItem>\n                  <SelectItem value=\"Degrees\">Degrees</SelectItem>\n                  <SelectItem value=\"Percentage\">Percentage</SelectItem>\n                  <SelectItem value=\"Inches per Foot\">Inches per Foot</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {inputs.inputFormat === \"Rise/Run\" ? (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"slope-rise\" className=\"text-gray-300\">Rise</Label>\n                  <Input\n                    id=\"slope-rise\"\n                    type=\"number\"\n                    value={inputs.rise}\n                    onChange={(e) => setInputs({ ...inputs, rise: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-slope-rise\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"slope-run\" className=\"text-gray-300\">Run</Label>\n                  <Input\n                    id=\"slope-run\"\n                    type=\"number\"\n                    value={inputs.run}\n                    onChange={(e) => setInputs({ ...inputs, run: e.target.value })}\n                    className=\"bg-black/50 border-primary/30 text-white\"\n                    data-testid=\"input-slope-run\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"slope-value\" className=\"text-gray-300\">Value</Label>\n                <Input\n                  id=\"slope-value\"\n                  type=\"number\"\n                  value={inputs.value}\n                  onChange={(e) => setInputs({ ...inputs, value: e.target.value })}\n                  className=\"bg-black/50 border-primary/30 text-white\"\n                  placeholder={\n                    inputs.inputFormat === \"Degrees\" ? \"30\" :\n                    inputs.inputFormat === \"Percentage\" ? \"50\" :\n                    \"4\"\n                  }\n                  data-testid=\"input-slope-value\"\n                />\n              </div>\n            )}\n          </div>\n\n          {results && (\n            <div className=\"space-y-4\">\n              <div className=\"p-6 bg-primary/10 border border-primary rounded-lg space-y-3\" data-testid=\"result-slope\">\n                <h3 className=\"text-primary font-bold text-lg mb-4\">All Format Conversions</h3>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Degrees:</span>\n                    <span className=\"text-white font-bold\">{results.degrees}°</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Percentage:</span>\n                    <span className=\"text-white font-bold\">{results.percent}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Pitch:</span>\n                    <span className=\"text-white font-bold\">{results.pitch}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Rise/Run:</span>\n                    <span className=\"text-white font-bold\">{results.riseRun}</span>\n                  </div>\n                  <div className=\"flex justify-between col-span-2\">\n                    <span className=\"text-gray-400\">Inches per Foot:</span>\n                    <span className=\"text-white font-bold\">{results.inchesPerFoot}&quot;</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-6 bg-black/50 border border-primary/20 rounded-lg\">\n                <h4 className=\"text-white font-semibold mb-3\">Drainage Analysis</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Minimum Slope:</span>\n                    <span className={`font-bold ${results.minSlope === \"Adequate\" ? \"text-green-400\" : \"text-red-400\"}`}>\n                      {results.minSlope}\n                    </span>\n                  </div>\n                  <div className=\"pt-2 border-t border-primary/20\">\n                    <p className=\"text-gray-400 text-sm mb-1\">Recommendation:</p>\n                    <p className=\"text-primary\">{results.recommendation}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 border-primary/30 text-primary hover:bg-primary/10\"\n              data-testid=\"button-close-slope\"\n            >\n              Close\n            </Button>\n            <Button \n              onClick={() => setInputs({ inputFormat: \"Rise/Run\", rise: \"4\", run: \"12\", value: \"\" })}\n              className=\"flex-1 bg-primary/20 text-primary hover:bg-primary/30\"\n              data-testid=\"button-clear-slope\"\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":55365},"client/src/pages/training-center.tsx":{"content":"import { PlayCircle, BookOpen, Video, GraduationCap, FileText, Users } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { TrainingCourse, TrainingResource } from \"@shared/schema\";\n\nconst iconMap: Record<string, any> = {\n  PlayCircle,\n  Video,\n  GraduationCap,\n  Users,\n  FileText,\n  BookOpen,\n};\n\nexport default function TrainingCenter() {\n  const { data: courses, isLoading: coursesLoading } = useQuery<TrainingCourse[]>({\n    queryKey: [\"/api/training/courses\"],\n  });\n\n  const { data: resources, isLoading: resourcesLoading } = useQuery<TrainingResource[]>({\n    queryKey: [\"/api/training/resources\"],\n  });\n\n  const appTraining = courses?.filter(c => c.category === \"app\") || [];\n  const businessTraining = courses?.filter(c => c.category === \"business\") || [];\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl md:text-6xl font-black mb-6 text-white\">\n            RooFix <span className=\"gradient-text neon-glow\">Academy</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n            Master RooFix AI and commercial roofing service department management\n          </p>\n        </div>\n\n        {/* App Training Section */}\n        <section className=\"mb-20\">\n          <div className=\"flex items-center mb-8\">\n            <Video className=\"h-8 w-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-white\">RooFix AI Platform Training</h2>\n          </div>\n          {coursesLoading ? (\n            <div className=\"text-center text-gray-400 py-12\">Loading courses...</div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {appTraining.map((course) => {\n                const IconComponent = iconMap[course.icon] || PlayCircle;\n                return (\n                  <Card \n                    key={course.id} \n                    className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                    data-testid={`card-app-training-${course.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex justify-center mb-4\">\n                        <div className=\"p-4 rounded-full bg-primary/10 border-2 border-primary\">\n                          <IconComponent className=\"h-12 w-12 text-primary\" />\n                        </div>\n                      </div>\n                      <CardTitle className=\"text-white text-center\">{course.title}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-center\">\n                        {course.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span className=\"text-gray-400\">Duration: {course.duration}</span>\n                        <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full border border-primary\">\n                          {course.level}\n                        </span>\n                      </div>\n                    </CardContent>\n                    <CardContent>\n                      <Button \n                        className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold glow-effect\"\n                        data-testid={`button-watch-${course.id}`}\n                      >\n                        <PlayCircle className=\"mr-2 h-5 w-5\" />\n                        Watch Course\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </section>\n\n        {/* Business Training Section */}\n        <section className=\"mb-20\">\n          <div className=\"flex items-center mb-8\">\n            <GraduationCap className=\"h-8 w-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-white\">Commercial Roofing Business Training</h2>\n          </div>\n          {coursesLoading ? (\n            <div className=\"text-center text-gray-400 py-12\">Loading courses...</div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {businessTraining.map((course) => {\n                const IconComponent = iconMap[course.icon] || GraduationCap;\n                return (\n                  <Card \n                    key={course.id} \n                    className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                    data-testid={`card-business-training-${course.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex justify-center mb-4\">\n                        <div className=\"p-4 rounded-full bg-primary/10 border-2 border-primary\">\n                          <IconComponent className=\"h-12 w-12 text-primary\" />\n                        </div>\n                      </div>\n                      <CardTitle className=\"text-white text-center\">{course.title}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-center\">\n                        {course.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span className=\"text-gray-400\">Duration: {course.duration}</span>\n                        <span className=\"px-3 py-1 bg-primary/20 text-primary rounded-full border border-primary\">\n                          {course.level}\n                        </span>\n                      </div>\n                    </CardContent>\n                    <CardContent>\n                      <Button \n                        className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold glow-effect\"\n                        data-testid={`button-watch-${course.id}`}\n                      >\n                        <PlayCircle className=\"mr-2 h-5 w-5\" />\n                        Watch Course\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </section>\n\n        {/* Resources Section */}\n        <section>\n          <div className=\"flex items-center mb-8\">\n            <BookOpen className=\"h-8 w-8 text-primary mr-3\" />\n            <h2 className=\"text-3xl font-bold text-white\">Additional Resources</h2>\n          </div>\n          {resourcesLoading ? (\n            <div className=\"text-center text-gray-400 py-12\">Loading resources...</div>\n          ) : (\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              {resources?.map((resource, index) => {\n                const IconComponent = iconMap[resource.icon] || BookOpen;\n                return (\n                  <Card \n                    key={resource.id} \n                    className=\"glow-border bg-black/80 backdrop-blur-sm hover:shadow-[0_0_30px_rgba(27,156,252,0.5)] transition-all\"\n                    data-testid={`card-resource-${index}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex justify-center mb-4\">\n                        <IconComponent className=\"h-16 w-16 text-primary\" />\n                      </div>\n                      <CardTitle className=\"text-white text-center\">{resource.title}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-center\">\n                        {resource.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Button \n                        className=\"w-full bg-primary hover:bg-primary/90 text-black font-bold glow-effect\"\n                        data-testid={`button-access-${index}`}\n                      >\n                        Access Resource\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </section>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8520},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}